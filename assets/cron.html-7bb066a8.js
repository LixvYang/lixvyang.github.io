import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as e,b as s,f as c,e as i,d as u,a as l}from"./app-f36a79b7.js";const r={},d={href:"https://darjun.github.io/2020/06/25/godailylib/cron/",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const a=p("ExternalLinkIcon");return o(),e("div",null,[n[1]||(n[1]=s("p",null,"定时任务是我们经常使用到的库，Linux crontab 是用来定期执行程序的命令。",-1)),c(" more "),n[2]||(n[2]=i(`<h1 id="cron定时任务" tabindex="-1"><a class="header-anchor" href="#cron定时任务" aria-hidden="true">#</a> cron定时任务</h1><p>crontab是 Linux 下的一个定时任务调度工具，可以定时来处理我们的任务。</p><p>我们也可以使用 go 语言来实现类似的定时管理。</p><p>比如我想实现一个每天凌晨 1 点扫描某个数据库的所有任务执行。那我们就可以这样去实现:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">var</span> next time<span class="token punctuation">.</span>Time
			<span class="token keyword">if</span> now<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> now<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
				next <span class="token operator">=</span> now
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				next <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// 每日凌晨 1 点执行任务</span>
			next <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

			<span class="token keyword">if</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> next<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				next <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span>
				next <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;UpdateOndutys Now=%s Next=%s&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
			timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>

			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> ts <span class="token operator">:=</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
				logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;Start UpdateOnduty_7day ts=%s&quot;</span><span class="token punctuation">,</span> ts<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务" aria-hidden="true">#</a> 定时任务</h2><p>可以看到当我们不想使用第三方库来实现cron的时候，往往就需要考虑很多方面，比如定时器执行时的时机，定时器的启动和取消，判断当前时间以及服务重启后的定时器失效问题。</p><p>但是如果使用第三方库就可以将思绪放在如何构建定时任务具体的细节而不是考虑如何写定时任务上。</p><h2 id="使用-robfig-cron-库" tabindex="-1"><a class="header-anchor" href="#使用-robfig-cron-库" aria-hidden="true">#</a> 使用 robfig/cron 库</h2><p>robfig/cron/v3是Go目前社区最受欢迎的cron库</p><p>我们下面会学习这个cron库的使用，以及熟悉常见的cron任务描述写法。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>robfig<span class="token operator">/</span>cron<span class="token operator">/</span>v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;time&quot;</span>

  <span class="token string">&quot;github.com/robfig/cron/v3&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  c <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  c<span class="token punctuation">.</span><span class="token function">AddFunc</span><span class="token punctuation">(</span><span class="token string">&quot;@every 1s&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;tick every 1 second&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  c<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">select</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cron库使用起来非常简单，创建 <code>cron</code> 对象，这个对象用于管理定时任务，调用 cron 对象的<code>AddFunc</code>来向管理器中添加定时任务，AddFunc 接收两个参数，第一个参数是我们cron触发时间的规则(比如每秒一次)，第二个参数是具体执行任务的参数。</p><p>值得注意的是<code>cron.New()</code>函数可以添加一些可选项，比如我们可以像其传入时区等等。</p><p>例如</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  nyc<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">&quot;Asia/China&quot;</span><span class="token punctuation">)</span>
  c <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>cron<span class="token punctuation">.</span><span class="token function">WithLocation</span><span class="token punctuation">(</span>nyc<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间格式" tabindex="-1"><a class="header-anchor" href="#时间格式" aria-hidden="true">#</a> 时间格式</h3><p>AddFunc 的第一个参数的时间格式与linux下的crontab非常相似，由一个有五个域的字符串组成,例如<code>0 * * * *</code>(每小时触发一次)。</p><p>这 5 个域含义依次为：</p><ul><li>Minutes：分钟，取值范围[0-59]，支持特殊字符* / , -；</li><li>Hours：小时，取值范围[0-23]，支持特殊字符* / , -；</li><li>Day of month：每月的第几天，取值范围[1-31]，支持特殊字符* / , - ?；</li><li>Month：月，取值范围[1-12]或者使用月份名字缩写[JAN-DEC]，支持特殊字符* / , -；</li><li>Day of week：周历，取值范围[0-6]或名字缩写[JUN-SAT]，支持特殊字符* / , - ?。</li></ul><p>特殊字符的含义如下:</p><ul><li><em>：使用</em>的域可以匹配任何值，例如将月份域（第 4 个）设置为*，表示每个月；<br> /：用来指定范围的步长，例如将小时域（第 2 个）设置为3-59/15表示第 3 分钟触发，以后每隔 15 分钟触发一次，因此第 2 次触发为第 18 分钟，第 3 次为 33 分钟。。。直到分钟大于 59；</li><li>,：用来列举一些离散的值和多个范围，例如将周历的域（第 5 个）设置为MON,WED,FRI表示周一、三和五；</li><li>-：用来表示范围，例如将小时的域（第 1 个）设置为9-17表示上午 9 点到下午 17 点（包括 9 和 17）；</li><li>?：只能用在月历和周历的域中，用来代替*，表示每月/周的任意一天。</li></ul><p>了解规则之后，我们可以定义任意时间：</p><ul><li>30 * * * <em>：分钟域为 30，其他域都是</em>表示任意。每小时的 30 分触发；</li><li>30 3-6,20-23 * * *：分钟域为 30，小时域的3-6,20-23表示 3 点到 6 点和 20 点到 23 点。3,4,5,6,20,21,22,23 时的 30 分触发；</li><li>0 0 1 1 *：1（第 4 个） 月 1（第 3 个） 号的 0（第 2 个） 时 0（第 1 个） 分触发。</li></ul><h3 id="预定义规则" tabindex="-1"><a class="header-anchor" href="#预定义规则" aria-hidden="true">#</a> 预定义规则</h3><p>以上规则和linux下的一模一样，但本库使用 go 语言定义了一些宏方便我们使用:</p><ul><li>@yearly：也可以写作@annually，表示每年第一天的 0 点。等价于0 0 1 1 *；</li><li>@monthly：表示每月第一天的 0 点。等价于0 0 1 * *；</li><li>@weekly：表示每周第一天的 0 点，注意第一天为周日，即周六结束，周日开始的那个 0 点。等价于0 0 * * 0；</li><li>@daily：也可以写作@midnight，表示每天 0 点。等价于0 0 * * *；</li><li>@hourly：表示每小时的开始。等价于0 * * * *。</li></ul><h3 id="定时器" tabindex="-1"><a class="header-anchor" href="#定时器" aria-hidden="true">#</a> 定时器</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>@every <span class="token operator">&lt;</span>duration<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义为每隔duration触发一次会调用time.ParseDuration()函数解析，所以ParseDuration支持的格式都可以。例如1h30m10s，感觉这个和time.Timer类似。</p><h3 id="job-接口" tabindex="-1"><a class="header-anchor" href="#job-接口" aria-hidden="true">#</a> Job 接口</h3><p>除了 AddFunc之外，我们还还可以通过实现Job接口，来为我们的类实现定时任务逻辑</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// cron.go</span>
<span class="token keyword">type</span> Job <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以定义一个结构来实现Job接口：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Bar <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  c <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">AddJob</span><span class="token punctuation">(</span><span class="token string">&quot;@every 1s&quot;</span><span class="token punctuation">,</span> Foo<span class="token punctuation">{</span>Bar<span class="token punctuation">:</span><span class="token string">&quot;lixin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  c<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>cron会创建一个新的 goroutine 来执行触发回调。如果这些回调需要并发访问一些资源、数据，我们需要显式地做同步，避免数据竞态问题。</p></div><hr><p>本文参考</p>`,41)),s("ol",null,[s("li",null,[s("a",d,[n[0]||(n[0]=u("https://darjun.github.io/2020/06/25/godailylib/cron/")),l(a)])])])])}const g=t(r,[["render",k],["__file","cron.html.vue"]]);export{g as default};
