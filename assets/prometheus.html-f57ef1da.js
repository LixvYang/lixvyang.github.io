import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as d,b as s,f as k,d as a,a as t,e as o}from"./app-c429fa5e.js";const m="/assets/images/program/prometheus/pushgateway-data.png",v="/assets/images/program/prometheus/node-exporter-data.png",b="/assets/images/program/prometheus/prometheus-node-data.png",g="/assets/images/program/prometheus/grafana-1.png",h="/assets/images/program/prometheus/grafana-2.png",f="/assets/images/program/prometheus/grafana-3.png",y="/assets/images/program/prometheus/gin-prometheus-data-1.png",_="/assets/images/program/prometheus/gin-prometheus-data-2.png",q="/assets/images/program/prometheus/gin-test-qps-data-1.png",w="/assets/images/program/prometheus/gin-test-qps-data-2.png",P="/assets/images/program/prometheus/gin-test-lantency-1.png",x="/assets/images/program/prometheus/gin-test-lantency-2.png",S="/assets/images/program/prometheus/gin-test-lantency-3.png",E="/assets/images/program/prometheus/gin-test-lantency-4.png",C="/assets/images/program/prometheus/gin-test-errcode-data-1.png",N="/assets/images/program/prometheus/gin-test-errcode-data-2.png",R="/assets/images/program/prometheus/gin-test-errcode-data-3.png",H="/assets/images/program/prometheus/gin-test-errcode-data-4.png",D={},M={href:"https://github.com/prometheus/node_exporter",target:"_blank",rel:"noopener noreferrer"},L={href:"https://prometheus.io/download/%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84node",target:"_blank",rel:"noopener noreferrer"},G={class:"hint-container tip"},O={href:"https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-metrics-types#shi-yong-histogram-he-summary-fen-xi-shu-ju-fen-bu-qing-kuang",target:"_blank",rel:"noopener noreferrer"},T={href:"https://prometheus.io/docs/querying/functions/%E3%80%82",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/LixvYang/prometheus-tutorial-demo-code",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://yunlzheng.gitbook.io/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://cloud.tencent.com/developer/article/1397758",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/wufeiqun/blog/blob/master/prometheus/2.%E4%BD%BF%E7%94%A8Prometheus%E7%9B%91%E6%8E%A7%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4.md",target:"_blank",rel:"noopener noreferrer"};function A(I,n){const c=p("HopeIcon"),i=p("BiliBili"),e=p("ExternalLinkIcon"),u=p("Share");return r(),d("div",null,[n[22]||(n[22]=s("p",null,"最近在公司做监控方面的工作，接触到了Prometheus、Grafana等云服务产品，特地在此记录下来学习到的知识和使用过程",-1)),k(" more "),n[23]||(n[23]=s("h1",{id:"两万字长文带你入门-prometheus",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#两万字长文带你入门-prometheus","aria-hidden":"true"},"#"),a(" 两万字长文带你入门 Prometheus")],-1)),s("p",null,[n[0]||(n[0]=a("本文章已录制B站视频")),t(c,{icon:"fa6-brands:bilibili",color:"#23ADE5"}),n[1]||(n[1]=a("🚀🚀🚀 :"))]),t(i,{bvid:"BV1yp4y1c74m"}),n[24]||(n[24]=o(`<p>本文首先会简单介绍一下Prometheus是啥，然后会用Go语言写一些程序上报一些接口数据到Prometheus上，接着通过Grafana展示出来，也算简单了解下云原生的知识了。</p><p>本文所用到的所有的库/组件会通过Docker来启动，没用Docker也不用害怕，只是个工具入门就可以了，我们本文用到的也只是最简单的部分。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>我们先来简单解释一下啥是Prometheus以及它是怎么来的。</p><p>我们知道K8S是由Google的Brog系统演变而来的，Prometheus就是受Brog的监控系统Brogmon启发而来。由前Google的工程师开发，2012年创建、2017年发布Prometheus2.0。</p><p>Prometheus是新一代云原生监控系统，社区非常活跃，目前已经有超过650位贡献者并且有超过120+第三方集成(K8s、Etcd、Consul、MySQL等等)，目标是达成针对长期趋势分析、告警、数据可视化的目的。</p><p>优势：</p><p>已于管理，核心只有一个二进制文件，不存在任何第三方依赖。唯一需要的就是本地磁盘，不会有潜在级联故障的风险。Prometheus是一个时序数据库，基于Pull模型的架构方式，可以在任何地方(本地电脑、开发环境、测试环境)搭建我们的监控系统。对于一些复杂情况，还可以使用Prometheus服务发现(Service Discovery)的能力动态管理监控目标。</p><p>数据可以通过Pull的方式获取(例如可以在你的服务下开放一个提供数据端口供Prometheus不断拉取获得)，也可以通过Prometheus提供的<code>Pushgateway</code>由我们的应用程序提供推送数据到Pushgateway，接着Pushgateway再推送到Prometheus获得。</p><p>采集到的数据指标(metric)保存在内置的时间序列数据库中(TSDB)，所有的样本出了基本的指标名称之外，还包含描述样本的标签<code>label</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_request_status<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&#39;200&#39;</span>,content_path<span class="token operator">=</span><span class="token string">&#39;/api/path&#39;</span>, <span class="token assign-left variable">environment</span><span class="token operator">=</span><span class="token string">&#39;produment&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>value1@timestamp1,value2@timestamp2<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
http_request_status<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&#39;200&#39;</span>,content_path<span class="token operator">=</span><span class="token string">&#39;/api/path2&#39;</span>, <span class="token assign-left variable">environment</span><span class="token operator">=</span><span class="token string">&#39;produment&#39;</span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>value1@timestamp1,value2@timestamp2<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每一条时间序列都是由指标名称(Metrics Name)和一系列标签(Labels)组成，每条时间序列按照时间的先后顺序存储一系列的样本值。标签的维度可能来源于我们需要监控的对象，比如我们需要监控某个接口的错误码，那么我们就可以用这样的标签<code>code=&#39;1001&#39;,&#39;endpoint&#39;=&#39;/api/hello&#39;</code>。</p><p>内置了强大的PromQL语言可以实现对采集指标的查询、聚合，同时也可以应用到数据可视化(Grafana)以及告警中，通过PromQL可以回答以下问题:</p><ul><li>在过去一段时间中95%应用延迟时间的分布范围？</li><li>预测在4小时后，磁盘空间占用大致会是什么情况？</li><li>CPU占用率前5位的服务有哪些？(过滤)</li></ul><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h3><h4 id="prometheus-server" tabindex="-1"><a class="header-anchor" href="#prometheus-server" aria-hidden="true">#</a> Prometheus Server</h4><p>Prometheus 其实就是我们上述所说的最简单的二进制文件，但我们选择通过Docker来启动,首先我们需要准备我们的prometheus.yaml配置文件，放到<code>~/data/prometheus/prometheus.yaml</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># my global config</span>
<span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>
  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>
  <span class="token comment"># scrape_timeout is set to the global default (10s).</span>

<span class="token comment"># Alertmanager configuration</span>
<span class="token key atrule">alerting</span><span class="token punctuation">:</span>
  <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
          <span class="token comment"># - alertmanager:9093</span>

<span class="token comment"># A scrape configuration containing exactly one endpoint to scrape:</span>
<span class="token comment"># Here it&#39;s Prometheus itself.</span>
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;pushgateway&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:9092&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">instance</span><span class="token punctuation">:</span> pushgateway
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;node&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:9100&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们只需要了解<code>global</code>和<code>scrape_configs</code>配置，global是全局配置，例如:</p><ul><li><code>global</code>下配置 <code>scrape_interval: 15s</code>，意思是抓取间隔是15s一次</li><li><code>scrape_configs</code>下的配置是具体的抓取数据的任务，<code>job_name: 名称</code>,<code>targets: 抓取目标地址</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于我们的Prometheus程序是通过Docker启动的，所以想访问我们我们的job<code>pushgateway</code>和<code>node</code>本机的端口程序需要通过<code>host.docker.internal</code>...意思是我们的pushgateway和node俩任务的数据源不是通过Docker启动的，而是通过我本机来启动的</p></div><p>将这个文件放入<code>~/data/prometheus/prometheus.yaml</code>就可以了(你可以随便放，只要Docker启动prometheus的时候路径对得上就OK)，接着我们就通过Docker启动Prometheus:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9090</span>:9090 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /Users/<span class="token variable">$YOURHOME</span>/data/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml <span class="token punctuation">\\</span>
    prom/prometheus <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没问题，打开<code>localhost:9090</code>就可以看到界面了</p><h4 id="pushgateway" tabindex="-1"><a class="header-anchor" href="#pushgateway" aria-hidden="true">#</a> Pushgateway</h4><p>当我们想采集我们的应用程序的数据时直接上报Prometheus是不可以的，但是我们应用程序的数据可以上报给Pushgateway，然后Prometheus可以从Pushgateway抓取数据，四舍五入等于我们的应用程序上报数据到Prometheus了.......😦</p><p>这里下载的时候需要区分系统版本</p><p>我的本机(MacOS Arm64)来启动Pushgateway的方式是这样的:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/prometheus/pushgateway/releases/download/v1.6.2/pushgateway-1.6.2.darwin-arm64.tar.gz
<span class="token function">tar</span> xzvf pushgateway-1.6.2.darwin-arm64.tar.gz
<span class="token function">mv</span> pushgateway-1.6.2.darwin-arm64/pushgateway /usr/local/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着启动:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pushgateway --web.listen-address <span class="token number">0.0</span>.0.0:9092
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不出意外打开<code>localhost:9092</code>就可以看到对应数据了</p><figure><img src="`+m+`" alt="pushgateway-data.png" tabindex="0" loading="lazy"><figcaption>pushgateway-data.png</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当然，你也可以通过Docker来启动<code>Pushgateway</code>,但是需要重新写之前的Prometheus配置文件和启动Prometheus Server了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull prom/pushgateway
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9091</span>:9091 prom/pushgateway
<span class="token comment"># 收集指标地址需要从 host.docker.internal:9092 改成 172.30.12.167:9092</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="node-exporter" tabindex="-1"><a class="header-anchor" href="#node-exporter" aria-hidden="true">#</a> Node Exporter</h4><p>在Prometheus的架构设计中，Prometheus Server并不直接服务监控特定的目标，其主要任务负责数据的收集，存储并且对外提供数据查询支持。</p><p>因此为了能够能够监控到某些东西，如主机的CPU使用率，我们需要使用到Exporter。Prometheus周期性的从Exporter暴露的HTTP服务地址（通常是/metrics）拉取监控样本数据。</p><p>从上面的描述中可以看出Exporter可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向Prometheus提供标准格式的监控样本数据即可。</p>`,38)),s("p",null,[n[3]||(n[3]=a("这里为了能够采集到主机的运行指标如CPU, 内存，磁盘等信息。我们可以使用")),s("a",M,[n[2]||(n[2]=a("Node Exporter")),t(e)]),n[4]||(n[4]=a("。"))]),s("p",null,[n[6]||(n[6]=a("Node Exporter同样采用Golang编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。可以从")),s("a",L,[n[5]||(n[5]=a("https://prometheus.io/download/获取最新的node")),t(e)]),n[7]||(n[7]=a(" exporter版本的二进制包。"))]),n[25]||(n[25]=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.darwin-amd64.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xzf</span> node_exporter-1.6.1.darwin-amd64.tar.gz

<span class="token builtin class-name">cd</span> node_exporter-1.6.1.darwin-amd64
<span class="token function">cp</span> node_exporter-1.6.1.darwin-amd64/node_exporter /usr/local/bin/
./node_exporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后，可以看到以下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>INFO<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> Listening on :9100        <span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token string">&quot;node_exporter.go:76&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开<code>http://localhost:9100/metrics</code>,可以看到当前node exporter获取到的当前主机的所有监控数据，如下所示：</p><figure><img src="`+v+`" alt="node-exporter-data.png" tabindex="0" loading="lazy"><figcaption>node-exporter-data.png</figcaption></figure><p>你会发现每一个监控指标之前都会有一段类似于如下形式的信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP node_cpu Seconds the cpus spent in each mode.</span>
<span class="token comment"># TYPE node_cpu counter</span>
node_cpu<span class="token punctuation">{</span>cpu<span class="token operator">=</span><span class="token string">&quot;cpu0&quot;</span>,mode<span class="token operator">=</span><span class="token string">&quot;idle&quot;</span><span class="token punctuation">}</span> <span class="token number">375209.421875</span>
<span class="token comment"># HELP node_load1 1m load average.</span>
<span class="token comment"># TYPE node_load1 gauge</span>
node_load1 <span class="token number">3.0703125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中HELP用于解释当前指标的含义，TYPE则说明当前指标的数据类型。</p><p>在上面的例子中node_cpu的注释表明当前指标是cpu0上idle进程占用CPU的总时间，CPU占用时间是一个只增不减的度量指标，从类型中也可以看出node_cpu的数据类型是计数器(counter)，与该指标的实际含义一致。</p><p>又例如node_load1该指标反映了当前主机在最近一分钟以内的负载情况，系统的负载情况会随系统资源的使用而变化，因此node_load1反映的是当前状态，数据可能增加也可能减少，从注释中可以看出当前指标类型为仪表盘(gauge)，与指标反映的实际含义一致。</p><p>除了这些以外，在当前页面中根据物理主机系统的不同，你还可能看到如下监控指标：</p><ul><li>node_boot_time：系统启动时间</li><li>node_cpu：系统CPU使用量</li><li>nodedisk*：磁盘IO</li><li>nodefilesystem*：文件系统用量</li><li>node_load1：系统负载</li><li>nodememeory*：内存使用量</li><li>nodenetwork*：网络带宽</li><li>node_time：当前系统时间</li><li>go_*：node exporter中go相关指标</li><li>process_*：node exporter自身进程相关运行指标</li></ul><p>由于我们上面的的prometheus.yaml已经启动并且抓取了9100端口的数据，所以访问<code>localhost:9090</code>是可以找到这些数据的:</p><figure><img src="`+b+`" alt="prometheus-node-data.png" tabindex="0" loading="lazy"><figcaption>prometheus-node-data.png</figcaption></figure><h4 id="grafana" tabindex="-1"><a class="header-anchor" href="#grafana" aria-hidden="true">#</a> Grafana</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Grafana可以在教程后面需要时再开启</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">--name</span><span class="token operator">=</span>grafana grafana/grafana-enterprise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://localhost:3000就可以进入到Grafana的界面中，默认情况下使用账户账号:admin、密码:admin进行登录。</p><p>在Grafana首页中显示默认的使用向导，包括：安装、添加数据源、创建Dashboard、邀请成员、以及安装应用和插件等主要流程:</p><figure><img src="`+g+'" alt="grafana-1.png" tabindex="0" loading="lazy"><figcaption>grafana-1.png</figcaption></figure><p>导入 Prometheus 的数据源，注意地址为: <code>http://host.docker.internal:9090</code>:</p><figure><img src="'+h+`" alt="grafana-2.png" tabindex="0" loading="lazy"><figcaption>grafana-2.png</figcaption></figure><p>然后就可以启动并且保存指标了:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>avg without<span class="token punctuation">(</span>cpu<span class="token punctuation">)</span> <span class="token punctuation">(</span>rate<span class="token punctuation">(</span>node_cpu<span class="token punctuation">[</span>2m<span class="token punctuation">]</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="grafana-3.png" tabindex="0" loading="lazy"><figcaption>grafana-3.png</figcaption></figure><hr><p>下面我们来了解一下Promethes的四种数据类型</p><h3 id="四种数据类型" tabindex="-1"><a class="header-anchor" href="#四种数据类型" aria-hidden="true">#</a> 四种数据类型</h3><p>Prometheus的数据类型有四种:</p><ol><li>Counter：只增不减的计数器</li><li>Gauge：可增可减的仪表盘</li><li>Histogram 直方图 数据分布情况</li><li>Summary 摘要 数据分布情况</li></ol><h4 id="counter-只增不减的计数器" tabindex="-1"><a class="header-anchor" href="#counter-只增不减的计数器" aria-hidden="true">#</a> Counter：只增不减的计数器</h4><p>Counter只增不减，除非系统发生重制。常见的监控指标有:http请求总数(统计QPS)，cpu使用率，都是Counter类型的监控指标，<mark>一般定义Counter类型指标时推荐使用_total作为后缀</mark></p><p>例如通过rate函数获取HTTP请求量的增长率:</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>rate(http_requests_total[5m])</p><p>PromQL中直接内置了rate(v range-vector)函数，rate函数可以直接计算区间向量v在时间窗口内平均增长速率。<br> 换句话说上面的PromQL可以替换成 increase(http_request_total[5m]) / 300也就是在5分钟的总请求次数/300秒</p></div><p>查询当前系统中，访问量前10的HTTP地址：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>topk(10, http_requests_total)</p></div><h4 id="gauge-可增可减的仪表盘" tabindex="-1"><a class="header-anchor" href="#gauge-可增可减的仪表盘" aria-hidden="true">#</a> Gauge：可增可减的仪表盘</h4><p>与Counter不同，Gauge类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如：node_memory_MemFree（主机当前空闲的内容大小）、node_memory_MemAvailable（可用内存大小）都是Gauge类型的监控指标。</p><p>通过Gauge指标，用户可以直接查看系统的当前状态：</p><p>node_memory_MemFree</p><p>对于Gauge类型的监控指标，通过PromQL内置函数delta()可以获取样本在一段时间返回内的变化情况。例如，计算CPU温度在两个小时内的差异：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>delta(cpu_temp_celsius{host=&quot;zeus&quot;}[2h])</p></div><p>还可以使用deriv()计算样本的线性回归模型，甚至是直接使用predict_linear()对数据的变化趋势进行预测。例如，预测系统磁盘空间在4个小时之后的剩余情况：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>predict_linear(node_filesystem_free{job=&quot;node&quot;}[1h], 4 * 3600)</p></div><h4 id="使用histogram和summary分析数据分布情况" tabindex="-1"><a class="header-anchor" href="#使用histogram和summary分析数据分布情况" aria-hidden="true">#</a> 使用Histogram和Summary分析数据分布情况</h4><p>大多数情况下我们通常倾向于某些量化指标的平均值，比如CPU平均值，页面平均响应时间。但这样的平均值弊端也很明显，例如一个接口的响应时间大多数情况下都在100毫秒以内，但就是有个别请求需要10s，这回导致某些接口的响应时间远远超过平均数，这种现象叫做肥尾效应。</p><p>为了区分是平均的慢还是肥尾的慢，最简单的方式就是按照请求延迟的范围进行分组。</p><p>例如，统计延迟在0<sub>10ms之间的请求数有多少而10</sub>20ms之间的请求数又有多少。</p><p>通过这种方式可以快速分析系统慢的原因。Histogram和Summary都是为了能够解决这样问题的存在，通过Histogram和Summary类型的监控指标，我们可以快速了解监控样本的分布情况。</p><p>例如，指标prometheus_tsdb_wal_fsync_duration_seconds的指标类型为Summary。 它记录了Prometheus Server中wal_fsync处理的处理时间，通过访问Prometheus Server的/metrics地址，可以获取到以下监控样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP prometheus_tsdb_wal_fsync_duration_seconds Duration of WAL fsync.</span>
<span class="token comment"># TYPE prometheus_tsdb_wal_fsync_duration_seconds summary</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span><span class="token punctuation">}</span> <span class="token number">0.012352463</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">}</span> <span class="token number">0.014458005</span>
prometheus_tsdb_wal_fsync_duration_seconds<span class="token punctuation">{</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.99&quot;</span><span class="token punctuation">}</span> <span class="token number">0.017316173</span>
prometheus_tsdb_wal_fsync_duration_seconds_sum <span class="token number">2.888716127000002</span>
prometheus_tsdb_wal_fsync_duration_seconds_count <span class="token number">216</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的样本中可以得知当前Prometheus Server进行wal_fsync操作的总次数为216次，耗时2.888716127000002s。其中中位数（quantile=0.5）的耗时为0.012352463，9分位数（quantile=0.9）的耗时为0.014458005s。</p><p>在Prometheus Server自身返回的样本数据中，我们还能找到类型为Histogram的监控指标prometheus_tsdb_compaction_chunk_range_bucket。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HELP prometheus_tsdb_compaction_chunk_range Final time range of chunks on their first compaction</span>
<span class="token comment"># TYPE prometheus_tsdb_compaction_chunk_range histogram</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;1600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;6400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;25600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;102400&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;409600&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;1.6384e+06&quot;</span><span class="token punctuation">}</span> <span class="token number">260</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;6.5536e+06&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;2.62144e+07&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_bucket<span class="token punctuation">{</span>le<span class="token operator">=</span><span class="token string">&quot;+Inf&quot;</span><span class="token punctuation">}</span> <span class="token number">780</span>
prometheus_tsdb_compaction_chunk_range_sum <span class="token number">1</span>.1540798e+09
prometheus_tsdb_compaction_chunk_range_count <span class="token number">780</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与Summary类型的指标相似之处在于Histogram类型的样本同样会反应当前指标的记录的总数(以_count作为后缀)以及其值的总量（以_sum作为后缀）。不同在于Histogram指标直接反应了在不同区间内样本的个数，区间通过标签le进行定义。</p><p>同时对于Histogram的指标，我们还可以通过histogram_quantile()函数计算出其值的分位数。不同在于Histogram通过histogram_quantile函数是在服务器端计算的分位数。 而Sumamry的分位数则是直接在客户端计算完成。</p><p>因此对于分位数的计算而言，Summary在通过PromQL进行查询时有更好的性能表现，而Histogram则会消耗更多的资源。反之对于客户端而言Histogram消耗的资源更少。在选择这两种方式时用户应该按照自己的实际场景进行选择。</p><h3 id="上报数据的方式" tabindex="-1"><a class="header-anchor" href="#上报数据的方式" aria-hidden="true">#</a> 上报数据的方式</h3><p>上报数据有两种一种是通过pull的方式，prometheus自动从配置文件的指定源去拉取数据，另一种是从我们的应用程序上报到pushgateway，然后从pushgateway推送数据:</p><h2 id="go语言监控数据上报" tabindex="-1"><a class="header-anchor" href="#go语言监控数据上报" aria-hidden="true">#</a> Go语言监控数据上报</h2><p>下面我来通过具体的go程序来演示一下:</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>具体的数据展示环节需要配置相应的环境,grafana、prometheus、pushgateway。</p></div><p>下面我通过Go语言来展示两种上报数据的类型:</p><p>首先是通过pull模式，prometheus自动从配置文件的指定源去拉取数据，我们只需要给prometheus提供源源不断的数据源:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;log&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/metrics&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		handler <span class="token operator">:=</span> promhttp<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8081&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们上面这段程序的意思是在8081端口提供数据，然后在我们的<code>prometheus.yaml</code>配置中新增对应的配置项来pull抓取8081端口<code>/metrics</code>的数据:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> go<span class="token punctuation">-</span>gin<span class="token punctuation">-</span>test
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;host.docker.internal:8081&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是你可以看到的结果是:</p><p><img src="`+y+'" alt="gin-prometheus-data-1.png" loading="lazy"><br><img src="'+_+`" alt="gin-prometheus-data-2.png" loading="lazy"></p><p>这是我们提供对应的端口，然后prometheus程序不断去拉取数据的方式。</p><p>还有另一种就是通过讲数据推送push到pushgateway,然后prometheus去pushgateway拉取数据的方式，下面我通过Go语言的实例来分别讲解推送数据的方式，以及顺便讲解prometheus，Counter、Gauge、Histogram数据类型的常见应用。</p><h3 id="接口qps监控" tabindex="-1"><a class="header-anchor" href="#接口qps监控" aria-hidden="true">#</a> 接口QPS监控</h3><p>我们要查看接口的QPS的话，我们的应用程序需要上报什么数据呢？其实很简单，只需要在程序里定义一个计数器，在接口处，每次进来一个请求以后加1之后即可，为了更加合理的使用prometheus, 我们在程序中定义一个Counter计数器变量, 不同的接口根据不同的label区分. 代码如下:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus/push&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Port <span class="token operator">=</span> <span class="token string">&quot;:8082&quot;</span>

	PrometheusUrl <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:9092&quot;</span>
	PrometheusJob <span class="token operator">=</span> <span class="token string">&quot;gin_test_prometheus_qps&quot;</span>

	PrometheusNamespace    <span class="token operator">=</span> <span class="token string">&quot;gin_test_data&quot;</span>
	EndpointsDataSubsystem <span class="token operator">=</span> <span class="token string">&quot;endpoints&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	pusher <span class="token operator">*</span>push<span class="token punctuation">.</span>Pusher

	endpointsQPSMonitor <span class="token operator">=</span> prometheus<span class="token punctuation">.</span><span class="token function">NewCounterVec</span><span class="token punctuation">(</span>
		prometheus<span class="token punctuation">.</span>CounterOpts<span class="token punctuation">{</span>
			Namespace<span class="token punctuation">:</span> PrometheusNamespace<span class="token punctuation">,</span>
			Subsystem<span class="token punctuation">:</span> EndpointsDataSubsystem<span class="token punctuation">,</span>
			Name<span class="token punctuation">:</span>      <span class="token string">&quot;QPS_statistic&quot;</span><span class="token punctuation">,</span>
			Help<span class="token punctuation">:</span>      <span class="token string">&quot;统计QPS数据&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pusher <span class="token operator">=</span> push<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>PrometheusUrl<span class="token punctuation">,</span> PrometheusJob<span class="token punctuation">)</span>
	prometheus<span class="token punctuation">.</span><span class="token function">MustRegister</span><span class="token punctuation">(</span>
		endpointsQPSMonitor<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	pusher<span class="token punctuation">.</span><span class="token function">Collector</span><span class="token punctuation">(</span>endpointsQPSMonitor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">HandleEndpointQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endpoint <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>
		<span class="token comment">// Counter .Add() 指标加1</span>
		endpointsQPSMonitor<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>prometheus<span class="token punctuation">.</span>Labels<span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">:</span> endpoint<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 每15秒上报一次数据</span>
		<span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> pusher<span class="token punctuation">.</span>
				<span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;push &quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">var</span> req <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span>
		req <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost%s%s&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		twoSecondTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
		halfSecondTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>halfSecondTicker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
				<span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&quot;/world&quot;</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>twoSecondTicker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
				<span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">HandleEndpointQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/world&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;World&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这段代码的大意是定义了两个接口<code>/hello</code>和<code>/world</code>,然后启动一个goroutine去每15秒给prometheus pushgateway上报一次数据，然后在另一个goroutine去分别访问这两个接口访问，访问这两个接口的时候，会通过我们的gin中间件<code>HandleEndpointQps</code>,对接口的endpoint增加，于是在prometheus上呈现最终的结果这样的。</p><figure><img src="`+q+'" alt="gin-test-qps-data-1.png" tabindex="0" loading="lazy"><figcaption>gin-test-qps-data-1.png</figcaption></figure><p>嗯...这就是最终的总counter的数据，如果想看增长率的话，需要使用promQL去查询比如<code>rate(gin_test_data_endpoints_QPS_statistic[1m])</code>.</p><figure><img src="'+w+'" alt="gin-test-qps-data-1.png" tabindex="0" loading="lazy"><figcaption>gin-test-qps-data-1.png</figcaption></figure><p>这样的数据就可以当作是统计每个间隔为1m内的QPS，<code>/world</code>接口是2(即每秒访问到2次)，<code>/hello</code>接口是0.5。</p><h3 id="接口耗时监控" tabindex="-1"><a class="header-anchor" href="#接口耗时监控" aria-hidden="true">#</a> 接口耗时监控</h3><p>这里我介绍一下监控接口的耗时监控, 那么如何监控接口的响应时间, 这要从Prometheus支持的数据类型说起. 这里还是用部署服务来作为说明，</p><p>对于接口监控耗时就不能用平均耗时来作为目标了，因为正常情况下接口耗时平均都很少例如是1ms,但是偶尔有几段情况下某个请求耗时突增到10s了是之前平均耗时的一万倍...那么如果平均一下子，这个突增的接口耗时就没了。所以针对例如接口耗时的请求，我们就不能用prometheus的<code>Counter</code>和<code>Gauge</code>类型了，我们需要用<code>HISTOGRAM</code>和<code>SUMMARY</code>类型。</p><p>这两个数据类型非常相似，都非常适用于统计持续一定时间的统计, 比如最常用的就是接口响应时间。</p>',83)),s("div",G,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"提示",-1)),n[11]||(n[11]=s("p",null,"Summary的百分位数(percentile)的计算都是在于客户端上, 而Histogram的计算是在server端来计算的, 所以出于最小化的影响业务, 建议使用Histogram来计算percentile.",-1)),s("p",null,[n[9]||(n[9]=a("这两个类型的详细说明链接在这里")),s("a",O,[n[8]||(n[8]=a("使用Histogram和Summary分析数据分布情况")),t(e)])])]),n[26]||(n[26]=o(`<p>使用这2种数据类型, 方法也很简单, 核心代码逻辑就是定义区间，然后将数据上报出去:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math/rand&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus/push&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Port <span class="token operator">=</span> <span class="token string">&quot;:8082&quot;</span>

	PrometheusUrl <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:9092&quot;</span>
	PrometheusJob <span class="token operator">=</span> <span class="token string">&quot;gin_test_prometheus&quot;</span>

	PrometheusNamespace    <span class="token operator">=</span> <span class="token string">&quot;gin_test_data&quot;</span>
	EndpointsDataSubsystem <span class="token operator">=</span> <span class="token string">&quot;endpoints&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	pusher <span class="token operator">*</span>push<span class="token punctuation">.</span>Pusher

	endpointsLantencyMonitor <span class="token operator">=</span> prometheus<span class="token punctuation">.</span><span class="token function">NewHistogramVec</span><span class="token punctuation">(</span>
		prometheus<span class="token punctuation">.</span>HistogramOpts<span class="token punctuation">{</span>
			Namespace<span class="token punctuation">:</span> PrometheusNamespace<span class="token punctuation">,</span>
			Subsystem<span class="token punctuation">:</span> EndpointsDataSubsystem<span class="token punctuation">,</span>
			Name<span class="token punctuation">:</span>      <span class="token string">&quot;lantency_statistic&quot;</span><span class="token punctuation">,</span>
			Help<span class="token punctuation">:</span>      <span class="token string">&quot;统计耗时数据&quot;</span><span class="token punctuation">,</span>
			Buckets<span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pusher <span class="token operator">=</span> push<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>PrometheusUrl<span class="token punctuation">,</span> PrometheusJob<span class="token punctuation">)</span>
	prometheus<span class="token punctuation">.</span><span class="token function">MustRegister</span><span class="token punctuation">(</span>
		endpointsLantencyMonitor<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	pusher<span class="token punctuation">.</span><span class="token function">Collector</span><span class="token punctuation">(</span>endpointsLantencyMonitor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">HandleEndpointLantency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endpoint <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>
		start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			lantency <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
			lantencyStr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%0.3d&quot;</span><span class="token punctuation">,</span> lantency<span class="token punctuation">.</span><span class="token function">Nanoseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">)</span> <span class="token comment">// 记录ms数据，为小数点后3位</span>
			lantencyFloat64<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>lantencyStr<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>     <span class="token comment">//转换成float64类型</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>lantencyFloat64<span class="token punctuation">)</span>

			endpointsLantencyMonitor<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>prometheus<span class="token punctuation">.</span>Labels<span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">:</span> endpoint<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>lantencyFloat64<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 每15秒上报一次数据</span>
		<span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> pusher<span class="token punctuation">.</span>
				<span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;push &quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 随机1秒内分钟访问一次接口</span>
		<span class="token keyword">var</span> req <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span>
		req <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost%s%s&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">HandleEndpointLantency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> count <span class="token builtin">int</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token operator">++</span>

		<span class="token keyword">if</span> count<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			suddenSecond <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 0-10s</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>suddenSecond<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
				<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		normalSecond <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 0-10ms</span>

		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>normalSecond<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>

		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码就是模拟大部分请求耗时在<code>0-100ms</code>之间，但偶尔有<code>秒级别</code>耗时的请求,代码很简单，这里就不过多解释了。</p><p>关于prometheus需要注意的是prometheus是数据之间是递增的，比如刚刚我运行的数据如下图所示:</p><figure><img src="`+P+'" alt="gin-test-lantency-1.png" tabindex="0" loading="lazy"><figcaption>gin-test-lantency-1.png</figcaption></figure><p>可以看到Histogram类型会自动为我们生成三个数据xxx_bucket(分布桶的数据)、xxx_count(统计请求的总数)、xxx_sum(请求请求的总耗时的和)。</p><p>所以我们要看平均耗时就可以通过<code>rate(gin_test_data_endpoints_lantency_statistic_sum[1m]) / rate(gin_test_data_endpoints_lantency_statistic_count[1m])</code>这个公式获得。</p><figure><img src="'+x+'" alt="gin-test-lantency-2.png" tabindex="0" loading="lazy"><figcaption>gin-test-lantency-2.png</figcaption></figure><p>我们再来看看xxx_bucket的数据:</p><figure><img src="'+S+'" alt="gin-test-lantency-3.png" tabindex="0" loading="lazy"><figcaption>gin-test-lantency-3.png</figcaption></figure><p>在这个图中每个指标都有一个<code>le</code>的值，指的是小于这个<code>le</code>值的数有多少。</p><p>例如</p><p><code>gin_test_data_endpoints_lantency_statistic_bucket{endpoints=&quot;/hello&quot;, exported_job=&quot;gin_test_prometheus&quot;, instance=&quot;pushgateway&quot;, job=&quot;pushgateway&quot;, le=&quot;100&quot;} 695</code>,意思是<code>le</code>小于100的值有695个，<code>le=&quot;10000&quot;</code>小于10000的值有699个，所以在100～10000值之间的有4个。</p><p>又因为我们程序中定义的单位和统计数据的单位是毫秒(ms),<mark>所以上个段落的意思是耗时在0.1ms~10s之间的数据有4次请求</mark>。</p><h4 id="加餐-grafana-heatmap图" tabindex="-1"><a class="header-anchor" href="#加餐-grafana-heatmap图" aria-hidden="true">#</a> 加餐 grafana heatmap图</h4><p>通过上述图是可以看出统计的耗时分布的，但是grafana有专门的心跳图(heatmap)来统计这样的分布耗时的。</p><figure><img src="'+E+`" alt="gin-test-lantency-4.png" tabindex="0" loading="lazy"><figcaption>gin-test-lantency-4.png</figcaption></figure><p><code>ceil(increase(gin_test_data_endpoints_lantency_statistic_bucket[30s]))</code>这样去统计</p><ul><li>gin_test_data_endpoints_lantency_statistic_bucket是一个Gauge度量值,记录每30秒内各个接口响应时间统计数据的桶值。</li><li>increase是PromQL函数,用于计算一个度量值在指定时间范围内的增加量。</li><li>[30s]后面的时间区间参数表示取本轮桶值与上轮桶值的差值,也就是30秒这个时间窗口内的增加情况。</li><li>ceil是向上取整函数,因为增加值可能是小数,我们需要得到一个整数值。</li></ul><h3 id="接口错误码监控" tabindex="-1"><a class="header-anchor" href="#接口错误码监控" aria-hidden="true">#</a> 接口错误码监控</h3><p>有时候我们需要统计对应接口的错误码，所以label中一般是需要对应的接口<code>endpoint</code>和错误码<code>code</code>,</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus&quot;</span>
	<span class="token string">&quot;github.com/prometheus/client_golang/prometheus/push&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	Port <span class="token operator">=</span> <span class="token string">&quot;:8083&quot;</span>

	PrometheusUrl <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:9092&quot;</span>
	PrometheusJob <span class="token operator">=</span> <span class="token string">&quot;gin_test_prometheus&quot;</span>

	PrometheusNamespace    <span class="token operator">=</span> <span class="token string">&quot;gin_test_data&quot;</span>
	EndpointsDataSubsystem <span class="token operator">=</span> <span class="token string">&quot;endpoints&quot;</span>
	ErrCodeDataSubsystem   <span class="token operator">=</span> <span class="token string">&quot;code&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	pusher <span class="token operator">*</span>push<span class="token punctuation">.</span>Pusher

	endpointsErrcodeMonitor <span class="token operator">=</span> prometheus<span class="token punctuation">.</span><span class="token function">NewGaugeVec</span><span class="token punctuation">(</span>
		prometheus<span class="token punctuation">.</span>GaugeOpts<span class="token punctuation">{</span>
			Namespace<span class="token punctuation">:</span> PrometheusNamespace<span class="token punctuation">,</span>
			Subsystem<span class="token punctuation">:</span> EndpointsDataSubsystem<span class="token punctuation">,</span>
			Name<span class="token punctuation">:</span>      <span class="token string">&quot;errcode_statistic&quot;</span><span class="token punctuation">,</span>
			Help<span class="token punctuation">:</span>      <span class="token string">&quot;统计接口错误码信息数据&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">,</span> ErrCodeDataSubsystem<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
	SUCCESS         <span class="token operator">=</span> <span class="token function">NewRespCode</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;Success&quot;</span><span class="token punctuation">)</span>
	ERROR_MYSQL     <span class="token operator">=</span> <span class="token function">NewRespCode</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">&quot;MySQL发生错误&quot;</span><span class="token punctuation">)</span>
	ERROR_REDIS     <span class="token operator">=</span> <span class="token function">NewRespCode</span><span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">&quot;Redis发生错误&quot;</span><span class="token punctuation">)</span>
	ERRROR_INTERNAL <span class="token operator">=</span> <span class="token function">NewRespCode</span><span class="token punctuation">(</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">&quot;Internal发生错误&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> DataResp <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Code <span class="token builtin">int</span>
	Msg  <span class="token builtin">string</span>
	Data any
<span class="token punctuation">}</span>

<span class="token keyword">type</span> RespCode <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Code <span class="token builtin">int</span>
	Msg  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewRespCode</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> RespCode <span class="token punctuation">{</span>
	<span class="token keyword">return</span> RespCode<span class="token punctuation">{</span>
		Code<span class="token punctuation">:</span> code<span class="token punctuation">,</span>
		Msg<span class="token punctuation">:</span>  msg<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewDataResp</span><span class="token punctuation">(</span>respCode RespCode<span class="token punctuation">,</span> data any<span class="token punctuation">)</span> DataResp <span class="token punctuation">{</span>
	<span class="token keyword">return</span> DataResp<span class="token punctuation">{</span>
		Code<span class="token punctuation">:</span> respCode<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>
		Msg<span class="token punctuation">:</span>  respCode<span class="token punctuation">.</span>Msg<span class="token punctuation">,</span>
		Data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	pusher <span class="token operator">=</span> push<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>PrometheusUrl<span class="token punctuation">,</span> PrometheusJob<span class="token punctuation">)</span>
	prometheus<span class="token punctuation">.</span><span class="token function">MustRegister</span><span class="token punctuation">(</span>
		endpointsErrcodeMonitor<span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	pusher<span class="token punctuation">.</span><span class="token function">Collector</span><span class="token punctuation">(</span>endpointsErrcodeMonitor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	gin<span class="token punctuation">.</span>ResponseWriter
	respBody <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newModel</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">*</span>Model <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Model<span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span>
		bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Model<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>respBody<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理错误码的中间件会比较复杂，因为需要处理响应体的信息</span>
<span class="token comment">// 所以需要通过改写gin的Context的方法来实现在中间件中获取错误体的信息</span>
<span class="token keyword">func</span> <span class="token function">HandleEndpointErrcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		endpoint <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path

		model <span class="token operator">:=</span> <span class="token function">newModel</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		<span class="token comment">// 改写gin.Context的Write 让响应体信息在我们的 model.respBody可查</span>
		c<span class="token punctuation">.</span>Writer <span class="token operator">=</span> model
		<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">var</span> resp DataResp
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>respBody<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>respBody<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;解析响应体失败: %+v&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">)</span>
				<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			endpointsErrcodeMonitor<span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span>prometheus<span class="token punctuation">.</span>Labels<span class="token punctuation">{</span>EndpointsDataSubsystem<span class="token punctuation">:</span> endpoint<span class="token punctuation">,</span> ErrCodeDataSubsystem<span class="token punctuation">:</span> resp<span class="token punctuation">.</span>Msg<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 每15秒上报一次数据</span>
		<span class="token keyword">for</span> <span class="token keyword">range</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> err <span class="token operator">:=</span> pusher<span class="token punctuation">.</span>
				<span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;push &quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 随机1秒内分钟访问一次接口</span>
		<span class="token keyword">var</span> req <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span>
		req <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>endpoint <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost%s%s&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token function">req</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">HandleEndpointErrcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> counter <span class="token builtin">int</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		counter<span class="token operator">++</span>
		<span class="token keyword">if</span> counter<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token function">NewDataResp</span><span class="token punctuation">(</span>ERROR_MYSQL<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> counter<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token function">NewDataResp</span><span class="token punctuation">(</span>SUCCESS<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> counter<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token function">NewDataResp</span><span class="token punctuation">(</span>ERRROR_INTERNAL<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> counter<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token function">NewDataResp</span><span class="token punctuation">(</span>ERROR_REDIS<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的代码就不详细说明了，大家有不懂可以尝试问问AI，或者加我的WX询问。</p><p>后面这样我们就可以看到我们接口的数据了:</p><figure><img src="`+C+'" alt="gin-test-errcode-data-1" tabindex="0" loading="lazy"><figcaption>gin-test-errcode-data-1</figcaption></figure><p>我们这里只统计了<code>/hello</code>的数据，其实也可以有很多别的接口数据,如果我们想查看接口<code>/hello</code>的错误码频率则可以这样:<code>rate(gin_test_data_endpoints_errcode_statistic{endpoints=&quot;/hello&quot;}[1m])</code>。</p><figure><img src="'+N+'" alt="gin-test-errcode-data-2" tabindex="0" loading="lazy"><figcaption>gin-test-errcode-data-2</figcaption></figure><p>或者基于方法和错误码统计请求错误频率<code>sum by (endpoints, code)(rate(gin_test_data_endpoints_errcode_statistic[1m]))</code>：</p><figure><img src="'+R+'" alt="gin-test-errcode-data-3" tabindex="0" loading="lazy"><figcaption>gin-test-errcode-data-3</figcaption></figure><p>如果我们想统计各方法的接口耗时，使用如下Query语句即可：</p><figure><img src="'+H+'" alt="gin-test-errcode-data-4" tabindex="0" loading="lazy"><figcaption>gin-test-errcode-data-4</figcaption></figure><p>以上图都是只有一个接口的情况下，但实际上真实环境中会有很多个接口。</p>',32)),s("p",null,[n[13]||(n[13]=a("更多的内建函数这里不展开介绍了。函数使用方法和介绍可以详细参见官方文档中的介绍：")),s("a",T,[n[12]||(n[12]=a("https://prometheus.io/docs/querying/functions/。")),t(e)])]),n[27]||(n[27]=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),a(" 总结")],-1)),n[28]||(n[28]=s("p",null,"我们的项目中规模起来了都会对监控都有极强的要求，需要对项目中各组件进行详细监控，如请求次数、接口耗时、接口错误码、节点在线情况等。",-1)),n[29]||(n[29]=s("p",null,"业务代码通过与Prometheus集成可以很方便监控我们的业务数据，以上的两万字长文也只是带大家入了个门，后续有更多想法我也会继续更新本文。",-1)),s("p",null,[n[15]||(n[15]=a("本文涉及到的所有代码都在我个人里")),s("a",B,[n[14]||(n[14]=a("github仓库")),t(e)]),n[16]||(n[16]=a("里"))]),t(u,{colorful:""}),n[30]||(n[30]=s("p",null,"参考:",-1)),s("p",null,[s("a",Q,[n[17]||(n[17]=a("Prometheus Book")),t(e)]),n[20]||(n[20]=s("br",null,null,-1)),s("a",z,[n[18]||(n[18]=a("错误码统计")),t(e)]),n[21]||(n[21]=s("br",null,null,-1)),s("a",U,[n[19]||(n[19]=a("QPS统计&&耗时统计")),t(e)])])])}const J=l(D,[["render",A],["__file","prometheus.html.vue"]]);export{J as default};
