import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as e,b as s,d as a,f as o,e as c}from"./app-7abc0186.js";const i={};function l(u,n){return p(),e("div",null,[n[0]||(n[0]=s("h1",{id:"samber-lo-包提升我们代码中的迭代质量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#samber-lo-包提升我们代码中的迭代质量","aria-hidden":"true"},"#"),a(" samber/lo 包提升我们代码中的迭代质量")],-1)),n[1]||(n[1]=s("p",null,[s("code",null,"github.com/samber/lo"),a("是基于go1.18版本之后的Lodash的工具库，Lodash则是一个一致性、模块化、高性能的JavaScript实用工具库，用于提升开发者效率，提高原生JavaScript方法的性能，在业界赫赫有名。")],-1)),n[2]||(n[2]=s("p",null,"lo 项目开始时作为一个有新泛型实现的实验，在某些方面可能看起来像Lodash。作者曾使用go-funk包进行编码，但go-funk使用反射（reflection），因此不是类型安全的，使用不当可能还会导致panic。",-1)),o(" more "),n[3]||(n[3]=c(`<h2 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h2><p>通常情况下我们使用go的包都是通过<code>go get xxx</code>来获取:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> get https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>samber<span class="token operator">/</span>lo@v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>lo@v2版本正在开发中...</p></div><p>通常不涉及并发情况下使用一般是:</p><p><code>github.com/samber/lo</code></p><p>并发情况则是使用(并发会使用到锁，所以数据量很大会导致性能问题):</p><p><code>github.com/samber/lo/parallel</code></p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>lo库本身支持的方法有许多，我们只需要记住当我们需要遍历map/slice时在绝大多数情况下都是可以使用到本库就可以,例如:</p><p>如果我们想遍历一个切片则可以:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		Name <span class="token builtin">string</span>
		Age  <span class="token builtin">int64</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> matchPersons <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

	lo<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span><span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span> <span class="token string">&quot;Lixv&quot;</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>  <span class="token number">21</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>item Person<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> item<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;Lixv&quot;</span> <span class="token punctuation">{</span>
			matchPersons <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>matchPersons<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>matchPersons<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而ForEach在代码库中这是这样的形式:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> ForEach<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>collection <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> iteratee <span class="token keyword">func</span><span class="token punctuation">(</span>item T<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> collection <span class="token punctuation">{</span>
		<span class="token function">iteratee</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这样的实现及其优雅，如果我们想自己写各种遍历实现就会针对不同的类型写很多功能相同的函数。</p><p>其实也可以通过<code>parallel.ForEach</code>进行,只不过会在遍历过程中有阻塞过程:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> ForEach<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>collection <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> iteratee <span class="token keyword">func</span><span class="token punctuation">(</span>item T<span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> collection <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>_item T<span class="token punctuation">,</span> _i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">iteratee</span><span class="token punctuation">(</span>_item<span class="token punctuation">,</span> _i<span class="token punctuation">)</span>
			wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实也有各种各样的功能，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/samber/lo&quot;</span>

lo<span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以实现这样的形式:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>res <span class="token operator">:=</span> lo<span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> index <span class="token operator">*</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

# <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的实现是这样的:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Times invokes the iteratee n times, returning an array of the results of each invocation.</span>
<span class="token comment">// The iteratee is invoked with index as argument.</span>
<span class="token comment">// Play: https://go.dev/play/p/vgQj3Glr6lT</span>
<span class="token keyword">func</span> Times<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>count <span class="token builtin">int</span><span class="token punctuation">,</span> iteratee <span class="token keyword">func</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T <span class="token punctuation">{</span>
	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> count<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">iteratee</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>学习工具可以提高我们的效率，这样的工具使用多了对我们的代码也会有质量上的提升，希望我们一起学习工具来提升我们的代码能力:)</p>`,25))])}const k=t(i,[["render",l],["__file","lodash.html.vue"]]);export{k as default};
