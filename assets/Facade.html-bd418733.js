import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,b as e,f as p,e as o}from"./app-9cb5c989.js";const c={};function i(l,n){return a(),t("div",null,[n[0]||(n[0]=e("p",null,"外观模式(Facade)隐藏系统的复杂性,并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式,它向现有的系统添加一个接口,来隐藏系统的复杂性。",-1)),p(" more "),n[1]||(n[1]=o(`<h1 id="外观模式" tabindex="-1"><a class="header-anchor" href="#外观模式" aria-hidden="true">#</a> 外观模式</h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>外观模式提供了一个高层次的接口,使子系统更易于使用。外观模式用于定义一个高层接口,这个接口使得这一子系统更加容易使用。</p><ul><li>简化了系统接口,外观模式提供了一个更高级、更抽象的接口,使得接口使用起来更容易。</li><li>更好地划分访问层次,外观模式可以更清楚地定义访问系统不同层次的入口。</li><li>符合迪米特法则,减少系统间的依赖。</li><li>提高灵活性,可以在不影响其他模块的情况下增加或者修改系统。</li></ul><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><p>人们很容易低估使用信用卡订购披萨时幕后工作的复杂程度。 在整个过程中会有不少的子系统发挥作用。 下面是其中的一部分：</p><ul><li>检查账户</li><li>检查安全码</li><li>借记/贷记余额</li><li>账簿录入</li><li>发送消息通知</li></ul><p>在如此复杂的系统中， 可以说是一步错步步错， 很容易就会引发大的问题。 这就是为什么我们需要外观模式， 让客户端可以使用一个简单的接口来处理众多组件。 客户端只需要输入卡片详情、 安全码、 支付金额以及操作类型即可。 外观模式会与多种组件进一步地进行沟通， 而又不会向客户端暴露其内部的复杂性。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> WalletFacade <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    account      <span class="token operator">*</span>Account
    wallet       <span class="token operator">*</span>Wallet
    securityCode <span class="token operator">*</span>SecurityCode
    notification <span class="token operator">*</span>Notification
    ledger       <span class="token operator">*</span>Ledger
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">newWalletFacade</span><span class="token punctuation">(</span>accountID <span class="token builtin">string</span><span class="token punctuation">,</span> code <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>WalletFacade <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting create account&quot;</span><span class="token punctuation">)</span>
    walletFacacde <span class="token operator">:=</span> <span class="token operator">&amp;</span>WalletFacade<span class="token punctuation">{</span>
        account<span class="token punctuation">:</span>      <span class="token function">newAccount</span><span class="token punctuation">(</span>accountID<span class="token punctuation">)</span><span class="token punctuation">,</span>
        securityCode<span class="token punctuation">:</span> <span class="token function">newSecurityCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span>
        wallet<span class="token punctuation">:</span>       <span class="token function">newWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        notification<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Notification<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        ledger<span class="token punctuation">:</span>       <span class="token operator">&amp;</span>Ledger<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Account created&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> walletFacacde
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>WalletFacade<span class="token punctuation">)</span> <span class="token function">addMoneyToWallet</span><span class="token punctuation">(</span>accountID <span class="token builtin">string</span><span class="token punctuation">,</span> securityCode <span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting add money to wallet&quot;</span><span class="token punctuation">)</span>
    err <span class="token operator">:=</span> w<span class="token punctuation">.</span>account<span class="token punctuation">.</span><span class="token function">checkAccount</span><span class="token punctuation">(</span>accountID<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> w<span class="token punctuation">.</span>securityCode<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>securityCode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    w<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span><span class="token function">creditBalance</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
    w<span class="token punctuation">.</span>notification<span class="token punctuation">.</span><span class="token function">sendWalletCreditNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    w<span class="token punctuation">.</span>ledger<span class="token punctuation">.</span><span class="token function">makeEntry</span><span class="token punctuation">(</span>accountID<span class="token punctuation">,</span> <span class="token string">&quot;credit&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>WalletFacade<span class="token punctuation">)</span> <span class="token function">deductMoneyFromWallet</span><span class="token punctuation">(</span>accountID <span class="token builtin">string</span><span class="token punctuation">,</span> securityCode <span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting debit money from wallet&quot;</span><span class="token punctuation">)</span>
    err <span class="token operator">:=</span> w<span class="token punctuation">.</span>account<span class="token punctuation">.</span><span class="token function">checkAccount</span><span class="token punctuation">(</span>accountID<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    err <span class="token operator">=</span> w<span class="token punctuation">.</span>securityCode<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>securityCode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> w<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span><span class="token function">debitBalance</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    w<span class="token punctuation">.</span>notification<span class="token punctuation">.</span><span class="token function">sendWalletDebitNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    w<span class="token punctuation">.</span>ledger<span class="token punctuation">.</span><span class="token function">makeEntry</span><span class="token punctuation">(</span>accountID<span class="token punctuation">,</span> <span class="token string">&quot;debit&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>外观模式通过提供一个简单的接口用来访问复杂系统,减少系统复杂性,提高灵活性,使客户端和子系统松耦合。是一种常用的结构型设计模式。</p>`,11))])}const k=s(c,[["render",i],["__file","Facade.html.vue"]]);export{k as default};
