import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as p,b as s,d as a,f as o,e as i}from"./app-f36a79b7.js";const l={};function c(u,n){return e(),p("div",null,[n[0]||(n[0]=s("p",null,"原型模式是一种创建型设计模式,使我们可以基于已有对象复制一个又一个新对象，而又无需使代码依赖它们所属的类。",-1)),n[1]||(n[1]=s("p",null,[a("最简单的方式就是在创建类的时候附加一个"),s("code",null,"Clone"),a("的方法。")],-1)),o(" more "),n[2]||(n[2]=i(`<h1 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式" aria-hidden="true">#</a> 原型模式</h1><p>原型模式的问题在于有些对象不是很容易复制的，如果仅仅是在赋值就没有意义了，有些对象比如说字符串可能是在堆上的类，这样的类通过直接赋值的方式是没办法直接复制的。</p><p>另外对于类而言有些类内的内容是有私有内容并且不希望对外暴露的，所以有时候直接从外部复制并不可行，就需要类的方法帮助我们。</p><p>原型模式就是将Clone的过程交给原有对象，这相当于让原有对象提供一个允许我们任意复制的接口。</p><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><h2 id="用处" tabindex="-1"><a class="header-anchor" href="#用处" aria-hidden="true">#</a> 用处</h2><p>原型模式的优点是:</p><ul><li><p>提高性能。使用原型模式实现对象的构造通常比直接调用构造函数更快一些。这是因为使用原型模式创建对象不需要额外信息,在某些场景下并不需要每次都重新创建一个完全新对象。</p></li><li><p>简化对象创建过程。原型模式大大简化了创建新对象的工作,通过拷贝原型直接复制对象结构而不是通过单独的构造器来实现。</p></li><li><p>在运行时可以增加和删除对象类型,实现灵活的生成对象的功能。</p></li></ul><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> prototype

<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name  <span class="token builtin">string</span>
	Proto <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">{</span>
	pClone <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">}</span>

	pClone<span class="token punctuation">.</span>Proto <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>Proto <span class="token punctuation">{</span>
		pClone<span class="token punctuation">.</span>Proto<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> pClone
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewPerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> Proto <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Person <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>  name<span class="token punctuation">,</span>
		Proto<span class="token punctuation">:</span> Proto<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总结来说,原型模式通过对象复制的方式实现对象的创建和克隆操作。Go语言通过结构体的组合和方法来支持灵活的原型模式实现。这种模式能够简化对象的创建过程。</p>`,12))])}const k=t(l,[["render",c],["__file","Prototype.html.vue"]]);export{k as default};
