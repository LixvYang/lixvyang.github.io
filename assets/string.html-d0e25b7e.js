import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,b as s,d as a,f as l,e as i,a as u}from"./app-78fc3c5c.js";const r={},d={href:"http://crates.io",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const t=e("ExternalLinkIcon");return o(),c("div",null,[n[3]||(n[3]=s("p",null,[a("一个语言中字符串的地位可以类比英语中"),s("mark",null,"动词"),a("的地位(想想动词有多少种变体就知道了)")],-1)),l(" more "),n[4]||(n[4]=i(`<h1 id="rust-字符串" tabindex="-1"><a class="header-anchor" href="#rust-字符串" aria-hidden="true">#</a> Rust 字符串</h1><p>Rust语言中字符串相当于新手练级中相当大的一个Boss了，因为其内容涵盖很广泛，而且会涉及许多<mark>前置引用</mark>，涉及许多你之后才会了解到的概念，比如生命周期、链式编程...</p><p>但是，首先，我们先来一道开胃菜:****</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> my_name <span class="token operator">=</span> <span class="token string">&quot;Pascal&quot;</span><span class="token punctuation">;</span>
    <span class="token function">greet</span><span class="token punctuation">(</span>my_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你猜猜这能不能通过编译呢？</p><p>当然不可以了-.-</p><p>编译器会报错，说明我们需要一个String类型的字符串而不是<code>&amp;str</code>类型的字符串：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token function">greet</span><span class="token punctuation">(</span>my_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">|</span>     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">-</span> help<span class="token punctuation">:</span> <span class="token keyword">try</span> using a conversion method<span class="token punctuation">:</span> \`<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`
  <span class="token operator">|</span>     <span class="token operator">|</span>     <span class="token operator">|</span>
  <span class="token operator">|</span>     <span class="token operator">|</span>     expected \`<span class="token class-name">String</span>\`<span class="token punctuation">,</span> found \`<span class="token operator">&amp;</span><span class="token keyword">str</span>\`
  <span class="token operator">|</span>     arguments to this function are incorrect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这里就遇到了一个典型的前置引用-------啥是切片？？？</p><h2 id="切片-slice" tabindex="-1"><a class="header-anchor" href="#切片-slice" aria-hidden="true">#</a> 切片(Slice)</h2><p>切片在Go语言中非常流行，切片允许你引用集合中部分连续的元素序列，而不用饮用整个集合。</p><p>对于字符串而言，切片就是对<code>String</code>类型中某一部分的饮用而已，看起来像这样:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello没有引用整个<code>String s</code>,而是引用了s的一部分，通过<code>[0..5]</code>的方式来指定的。</p><p>这就是创建切片的语法，使用<code>[]</code>包括序列，和其他语言一样，左闭右开,即<code>[0..5]</code>是元素中<code>0 1 2 3 4</code>的集合。</p><figure><img src="https://pic1.zhimg.com/80/v2-69da917741b2c610732d8526a9cc86f5_1440w.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Rust中使用.. range序列语法时，如果想从0开始，可以用如下方式:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，如果你的切片想要包含<code>String</code>的最后一个字节，就可以这样使用:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以截取完整的 String 切片：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在对字符串使用切片语法时需要格外小心，切片的索引必须落在字符之间的边界位置，也就是 UTF-8 字符的边界，例如中文在 UTF-8 中占用三个字节，下面的代码就会崩溃：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们只取 s 字符串的前两个字节，但是本例中每个汉字占用三个字节，因此没有落在边界处，也就是连 中 字都取不完整，此时程序会直接崩溃退出，如果改成 &amp;s[0..3]，则可以正常通过编译。 因此，当你需要对字符串做切片索引操作时，需要格外小心这一点。</p></div><p>字符串切片的类型标识是<code>&amp;str</code>,因此我们可以这样声明一个函数，输入<code>String</code>类型，返回它的切片：<code>fn first_word(s: &amp;String) -&gt; &amp;str</code>。</p><p>有了切片就可以这样写:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the first word is: {}&quot;</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器报错如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>error<span class="token punctuation">[</span><span class="token constant">E0502</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cannot borrow \`s\` <span class="token keyword">as</span> mutable because it is also borrowed <span class="token keyword">as</span> immutable
  <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token number">5</span>
   <span class="token operator">|</span>
<span class="token number">16</span> <span class="token operator">|</span>     <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">|</span>                           <span class="token operator">-</span><span class="token operator">-</span> immutable borrow occurs here
<span class="token number">17</span> <span class="token operator">|</span>
<span class="token number">18</span> <span class="token operator">|</span>     s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>
   <span class="token operator">|</span>     <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> mutable borrow occurs here
<span class="token number">19</span> <span class="token operator">|</span>
<span class="token number">20</span> <span class="token operator">|</span>     <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the first word is: {}&quot;</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">|</span>                                       <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> immutable borrow later used here

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借用的规则:当我们已经有了一个可变借用时，无法再拥有一个不可变借用。因为clear需要清空<code>String</code>,所以它需要一个可变借用，而之后的<code>println!</code>又需要一个不可变借用，所以编译无法通过。</p><h3 id="其他切片" tabindex="-1"><a class="header-anchor" href="#其他切片" aria-hidden="true">#</a> 其他切片</h3><p>不仅仅字符串可以有切片，数组等其他类型也有:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该数组切片的类型是 &amp;[i32]，数组切片和字符串切片的工作方式是一样的，例如持有一个引用指向原始数组的某个元素和长度。</p><h2 id="字符串的字面量是切片" tabindex="-1"><a class="header-anchor" href="#字符串的字面量是切片" aria-hidden="true">#</a> 字符串的字面量是切片</h2><p>之前提到过字符串字面量，但是没有提到它的类型:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;Helllo,world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际上s的类型是&amp;str,因此实际上可以这样声明:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Hello,world&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该切片指向了程序可执行文件中的某个点，这也是为什么字符串字面量是不可变的，因为 &amp;str 是一个不可变引用。</p><p>了解完切片，可以进入本节的正题了。</p><h2 id="什么是字符串" tabindex="-1"><a class="header-anchor" href="#什么是字符串" aria-hidden="true">#</a> 什么是字符串？</h2><p>顾名思义，字符串是由字符组成的连续集合，但是在上一节中我们提到过，Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)，这样有助于大幅降低字符串所占用的内存空间。</p><p>Rust 在语言级别，只有一种字符串类型： str，它通常是以引用类型出现 &amp;str，也就是上文提到的字符串切片。虽然语言级别只有上述的 str 类型，但是在标准库里，还有多种不同用途的字符串类型，其中使用最广的即是 String 类型。</p><p>str 类型是硬编码进可执行文件，也无法被修改，但是 String 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，当 Rust 用户提到字符串时，往往指的就是 String 类型和 &amp;str 字符串切片类型，这两个类型都是 UTF-8 编码。</p><p>除了 String 类型的字符串，Rust 的标准库还提供了其他类型的字符串，例如 OsString， OsStr， CsString 和 CsStr 等，注意到这些名字都以 String 或者 Str 结尾了吗？它们分别对应的是具有所有权和被借用的变量。</p><h2 id="string与-str的转换" tabindex="-1"><a class="header-anchor" href="#string与-str的转换" aria-hidden="true">#</a> String与&amp;str的转换</h2><p>在之前的代码中，已经见到好几种从 &amp;str 类型生成 String 类型的操作：</p><p>String::from(&quot;hello,world&quot;)<br> &quot;hello,world&quot;.to_string()<br> 那么如何将 String 类型转为 &amp;str 类型呢？答案很简单，取引用即可：</p><p>fn main() {<br> let s = String::from(&quot;hello,world!&quot;);<br> say_hello(&amp;s);<br> say_hello(&amp;s[..]);<br> say_hello(s.as_str());<br> }</p><p>fn say_hello(s: &amp;str) {<br> println!(&quot;{}&quot;,s);<br> }<br> 实际上这种灵活用法是因为 deref 隐式强制转换。</p><h2 id="字符串索引" tabindex="-1"><a class="header-anchor" href="#字符串索引" aria-hidden="true">#</a> 字符串索引</h2><p>在其它语言中，使用索引的方式访问字符串的某个字符或者子串是很正常的行为，但是在 Rust 中就会报错：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>   <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> h <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码会产生如下错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token number">3</span> <span class="token operator">|</span>     <span class="token keyword">let</span> h <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token operator">|</span>             <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> \`<span class="token class-name">String</span>\` cannot be indexed by \`<span class="token punctuation">{</span>integer<span class="token punctuation">}</span>\`
  <span class="token operator">|</span>
  <span class="token operator">=</span> help<span class="token punctuation">:</span> the <span class="token keyword">trait</span> \`<span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>integer<span class="token punctuation">}</span><span class="token operator">&gt;</span>\` is not implemented <span class="token keyword">for</span> \`<span class="token class-name">String</span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深入字符串内部<br> 字符串的底层的数据存储格式实际上是[ u8 ]，一个字节数组。对于 let hello = String::from(&quot;Hola&quot;); 这行代码来说，Hola 的长度是 4 个字节，因为 &quot;Hola&quot; 中的每个字母在 UTF-8 编码中仅占用 1 个字节，但是对于下面的代码呢？</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;中国人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果问你该字符串多长，你可能会说 3，但是实际上是 9 个字节的长度，因为大部分常用汉字在 UTF-8 中的长度是 3 个字节，因此这种情况下对 hello 进行索引，访问 &amp;hello[0] 没有任何意义，因为你取不到 中 这个字符，而是取到了这个字符三个字节中的第一个字节，这是一个非常奇怪而且难以理解的返回值。</p><h3 id="字符串的不同表现形式" tabindex="-1"><a class="header-anchor" href="#字符串的不同表现形式" aria-hidden="true">#</a> 字符串的不同表现形式</h3><p>现在看一下用梵文写的字符串 “नमस्ते”, 它底层的字节数组如下形式：</p><p>[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,<br> 224, 165, 135]<br> 长度是 18 个字节，这也是计算机最终存储该字符串的形式。如果从字符的形式去看，则是：</p><p>[&#39;न&#39;, &#39;म&#39;, &#39;स&#39;, &#39;्&#39;, &#39;त&#39;, &#39;े&#39;]<br> 但是这种形式下，第四和六两个字母根本就不存在，没有任何意义，接着再从字母串的形式去看：</p><p>[&quot;न&quot;, &quot;म&quot;, &quot;स्&quot;, &quot;ते&quot;]<br> 所以，可以看出来 Rust 提供了不同的字符串展现方式，这样程序可以挑选自己想要的方式去使用，而无需去管字符串从人类语言角度看长什么样。</p><p>还有一个原因导致了 Rust 不允许去索引字符串：因为索引操作，我们总是期望它的性能表现是 O(1)，然而对于 String 类型来说，无法保证这一点，因为 Rust 可能需要从 0 开始去遍历字符串来定位合法的字符。</p><h2 id="字符串切片" tabindex="-1"><a class="header-anchor" href="#字符串切片" aria-hidden="true">#</a> 字符串切片</h2><p>前文提到过，字符串切片是非常危险的操作，因为切片的索引是通过字节来进行，但是字符串又是 UTF-8 编码，因此你无法保证索引的字节刚好落在字符的边界上，例如:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>hello<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的程序，会直接造成崩溃：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;byte</span> index <span class="token number">2</span> is not a <span class="token keyword">char</span> boundary<span class="token punctuation">;</span> it is inside <span class="token char">&#39;中&#39;</span> <span class="token punctuation">(</span>bytes <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">)</span> of \`中国人\`&#39;<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">14</span>
note<span class="token punctuation">:</span> run with \`<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>\` environment variable to display a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里提示的很清楚，我们索引的字节落在了 中 字符的内部，这种返回没有任何意义。</p><p>因此在通过索引区间来访问字符串时，需要格外的小心，一不注意，就会导致你程序的崩溃！</p><h2 id="操作字符串" tabindex="-1"><a class="header-anchor" href="#操作字符串" aria-hidden="true">#</a> 操作字符串</h2><p>由于String是可变的字符串，所以介绍一下对Rust字符串的修改、添加、删除等方法：</p><h3 id="push-追加" tabindex="-1"><a class="header-anchor" href="#push-追加" aria-hidden="true">#</a> Push(追加)</h3><p>在字符串尾部可以使用<code>push()</code>方法追加字符<code>char</code>,也可以使用<code>push_str()</code>方法追加字符串字面量。这两个方法都是在原有的字符串追加的，并不会返回新的字符串。由于字符串追加操作要<mark>修改原来的字符串</mark>，则该字符串必须是可变的，即字符串变量必须由 mut 关键字修饰。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;追加字符串 push_str() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;追加字符 push() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行结果:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>追加字符串 <span class="token function">push_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Hello</span> rust
追加字符 <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Hello</span> <span class="token macro property">rust!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert-插入" tabindex="-1"><a class="header-anchor" href="#insert-插入" aria-hidden="true">#</a> Insert(插入)</h3><p>可以使用<code>insert()</code>方法插入单个字符<code>char</code>,也可以使用<code>insert_str()</code>方法插入字符串字面量，与<code>push</code>方法不同，这俩方法需要两个参数<code>(1.插入的索引、2.插入的字符（串))</code>，索引从0开始计数，如果发生越界则会发生错误。由于字符串插入操作需要修改原来的字符串，所以字符串也必须是<code>mut</code>。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;插入字符 insert() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">insert_str</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;I like&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;插入字符串 insert_str() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>插入字符 <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Hello</span><span class="token punctuation">,</span> rust
插入字符串 <span class="token function">insert_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Hello</span><span class="token punctuation">,</span><span class="token class-name">I</span> like rust
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace-替换" tabindex="-1"><a class="header-anchor" href="#replace-替换" aria-hidden="true">#</a> Replace(替换)</h3><p>如果想要把字符串中的某个字符串替换成其他字符串，那可以使用<code>replace()</code>方法。与替换有关的方法有三个:</p><ol><li>replace</li></ol><p><code>replace</code>方法可用于<code>String</code>和<code>&amp;str</code>类型。<code>replace()</code>方法接受两个参数，第一个参数是要被替换的字符串，第二个参数是新的字符串。该方法会替换所有匹配到的字符串。<mark>该方法会返回一个新的字符串</mark>，不是操作原来的字符串。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> string_replace <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;I like rust. Learning rust is my favorite!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> new_string_replace <span class="token operator">=</span> string_replace<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RUST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>new_string_replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>new_string_replace <span class="token operator">=</span> <span class="token string">&quot;I like RUST. Learning RUST is my favorite!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>replacen</li></ol><p><code>replacen</code>方法接受三个参数，前两个和<code>replace</code>一样，第三个参数则表示替换的个数，该方法仍然是<mark>返回新的字符串，而不是操作原来的字符串</mark>。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> string_replace <span class="token operator">=</span> <span class="token string">&quot;I like rust. Learning rust is my favorite!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> new_string_replacen <span class="token operator">=</span> string_replace<span class="token punctuation">.</span><span class="token function">replacen</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RUST&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>new_string_replacen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>new_string_replacen <span class="token operator">=</span> <span class="token string">&quot;I like RUST. Learning rust is my favorite!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>replace_range</li></ol><p>该方法仅适用于<code>String</code>类型，接受两个参数，第一个是替换的字符串的范围，第二个是新的字符串，该方法是直接操作原有的字符串，不会返回新的字符串，需要用<code>mut</code>关键字修饰。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_replace_range <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;I like rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string_replace_range<span class="token punctuation">.</span><span class="token function">replace_range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_replace_range<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>string_replace_range <span class="token operator">=</span> <span class="token string">&quot;I like Rust!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="delete-删除" tabindex="-1"><a class="header-anchor" href="#delete-删除" aria-hidden="true">#</a> Delete(删除)</h3><p>与字符串删除相关的方法有4个，分别是<code>pop</code>、<code>remove</code>、<code>truncate</code>、<code>clear</code>,这四个方法仅适用于<code>String</code>类型。</p><ol><li><code>pop</code> -- 删除并返回字符串中最后一个字符</li></ol><p>该方法直接操作原有字符串。但返回值是一个<code>Option</code>类型，如果字符串为空，则返回<code>None</code>：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_pop <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;rust pop 中文!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> string_pop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span> string_pop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>p1 <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>
   <span class="token char">&#39;!&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
p2 <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>
   <span class="token char">&#39;文&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
string_pop <span class="token operator">=</span> <span class="token string">&quot;rust pop 中&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>remove</code> --- 删除并返回字符串中指定位置的字符</li></ol><p>该方法是直接操作原来的字符串。但是存在返回值，其返回值是删除位置的字符串，只接受一个参数，表示该字符起始的索引位置。remove() 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_remove <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;测试remove方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span>
        <span class="token string">&quot;string_remove 占 {} 个字节&quot;</span><span class="token punctuation">,</span>
        <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">size_of_val</span><span class="token punctuation">(</span>string_remove<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除第一个汉字</span>
    string_remove<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面代码会发生错误</span>
    <span class="token comment">// string_remove.remove(1);</span>
    <span class="token comment">// 直接删除第二个汉字</span>
    <span class="token comment">// string_remove.remove(3);</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_remove<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>string_remove 占 <span class="token number">18</span> 个字节
string_remove <span class="token operator">=</span> <span class="token string">&quot;试remove方法&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>truncate —— 删除字符串中从指定位置开始到结尾的全部字符</li></ol><p>该方法是直接操作原来的字符串。无返回值。该方法 truncate() 方法是按照字节来处理字符串的，如果参数所给的位置不是合法的字符边界，则会发生错误。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_truncate <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;测试truncate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string_truncate<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_truncate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>string_truncate <span class="token operator">=</span> <span class="token string">&quot;测&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、clear —— 清空字符串</p><p>该方法是直接操作原来的字符串。调用后，删除字符串中的所有字符，相当于 truncate() 方法参数为 0 的时候。</p><p>示例代码如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_clear <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;string clear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string_clear<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_clear<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>string_clear <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="concatenate-连接" tabindex="-1"><a class="header-anchor" href="#concatenate-连接" aria-hidden="true">#</a> Concatenate(连接)</h3><p>1、使用 + 或者 += 连接字符串</p><p>使用 + 或者 += 连接字符串，要求右边的参数必须为字符串的切片引用（Slice）类型。其实当调用 + 的操作符时，相当于调用了 std::string 标准库中的 add() 方法，这里 add() 方法的第二个参数是一个引用的类型。因此我们在使用 +， 必须传递切片引用类型。不能直接传递 String 类型。+ 是返回一个新的字符串，所以变量声明可以不需要 mut 关键字修饰。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> string_append <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> string_rust <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// &amp;string_rust会自动解引用为&amp;str</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> string_append <span class="token operator">+</span> <span class="token operator">&amp;</span>string_rust<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// \`result + &quot;!&quot;\` 中的 \`result\` 是不可变的</span>
    result <span class="token operator">+=</span> <span class="token string">&quot;!!!&quot;</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;连接字符串 + -&gt; {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>连接字符串 <span class="token operator">+</span> <span class="token punctuation">-&gt;</span> hello <span class="token macro property">rust!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>add() 方法的定义：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为该方法涉及到更复杂的特征功能，因此我们这里简单说明下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在下句中，s1的所有权被转移走了，因此后面不能再使用s1</span>
    <span class="token keyword">let</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面的语句如果去掉注释，就会报错</span>
    <span class="token comment">// println!(&quot;{}&quot;,s1);</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>self 是 String 类型的字符串 s1，该函数说明，只能将 &amp;str 类型的字符串切片添加到 String 类型的 s1 上，然后返回一个新的 String 类型，所以 let s3 = s1 + &amp;s2; 就很好解释了，将 String 类型的 s1 与 &amp;str 类型的 s2 进行相加，最终得到 String 类型的 s3。</p><p>由此可推，以下代码也是合法的：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;tic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;tac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;toe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String = String + &amp;str + &amp;str + &amp;str + &amp;str</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token operator">&amp;</span>s2 <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-format-连接字符串" tabindex="-1"><a class="header-anchor" href="#使用-format-连接字符串" aria-hidden="true">#</a> 使用 format! 连接字符串</h3><p>format! 这种方式适用于 String 和 &amp;str 。format! 的用法与 print! 的用法类似。</p><p>示例代码如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {}!&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行结果：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>hello <span class="token macro property">rust!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字符串转义" tabindex="-1"><a class="header-anchor" href="#字符串转义" aria-hidden="true">#</a> 字符串转义</h2><p>我们可以通过转义的方式 \\ 输出 ASCII 和 Unicode 字符。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过 \\ + 字符的十六进制表示，转义输出一个字符</span>
    <span class="token keyword">let</span> byte_escape <span class="token operator">=</span> <span class="token string">&quot;I&#39;m writing \\x52\\x75\\x73\\x74!&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;What are you doing\\x3F (\\\\x3F means ?) {}&quot;</span><span class="token punctuation">,</span> byte_escape<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \\u 可以输出一个 unicode 字符</span>
    <span class="token keyword">let</span> unicode_codepoint <span class="token operator">=</span> <span class="token string">&quot;\\u{211D}&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> character_name <span class="token operator">=</span> <span class="token string">&quot;\\&quot;DOUBLE-STRUCK CAPITAL R\\&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Unicode character {} (U+211D) is called {}&quot;</span><span class="token punctuation">,</span>
        unicode_codepoint<span class="token punctuation">,</span> character_name
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 换行了也会保持之前的字符串格式</span>
    <span class="token comment">// 使用\\忽略换行符</span>
    <span class="token keyword">let</span> long_string <span class="token operator">=</span> <span class="token string">&quot;String literals
                        can span multiple lines.
                        The linebreak and indentation here -&gt;\\
                        &lt;- can be escaped too!&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> long_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，在某些情况下，可能你会希望保持字符串的原样，不要转义：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> raw_str <span class="token operator">=</span> <span class="token string">r&quot;Escapes don&#39;t work here: \\x3F \\u{211D}&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> raw_str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果字符串包含双引号，可以在开头和结尾加 #</span>
    <span class="token keyword">let</span> quotes <span class="token operator">=</span> <span class="token string">r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> quotes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果还是有歧义，可以继续增加，没有限制</span>
    <span class="token keyword">let</span> longer_delimiter <span class="token operator">=</span> <span class="token string">r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> longer_delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作-utf-8-字符串" tabindex="-1"><a class="header-anchor" href="#操作-utf-8-字符串" aria-hidden="true">#</a> 操作 UTF-8 字符串</h2><p>前文提到了几种使用 UTF-8 字符串的方式，下面来一一说明。</p><h3 id="字符" tabindex="-1"><a class="header-anchor" href="#字符" aria-hidden="true">#</a> 字符</h3><p>如果你想要以 Unicode 字符的方式遍历字符串，最好的办法是使用 chars 方法，例如：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>中
国
人
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节" tabindex="-1"><a class="header-anchor" href="#字节" aria-hidden="true">#</a> 字节</h3><p>这种方式是返回字符串的底层字节数组表现形式：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token number">228</span>
<span class="token number">184</span>
<span class="token number">173</span>
<span class="token number">229</span>
<span class="token number">155</span>
<span class="token number">189</span>
<span class="token number">228</span>
<span class="token number">186</span>
<span class="token number">186</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取子串" tabindex="-1"><a class="header-anchor" href="#获取子串" aria-hidden="true">#</a> 获取子串</h3>`,160)),s("p",null,[n[1]||(n[1]=a("想要准确的从 UTF-8 字符串中获取子串是较为复杂的事情，例如想要从 holla中国人नमस्ते 这种变长的字符串中取出某一个子串，使用标准库你是做不到的。 你需要在 ")),s("a",d,[n[0]||(n[0]=a("crates.io")),u(t)]),n[2]||(n[2]=a(" 上搜索 utf8 来寻找想要的功能。"))]),n[5]||(n[5]=s("p",null,"可以考虑尝试下这个库：utf8_slice。",-1))])}const g=p(r,[["render",k],["__file","string.html.vue"]]);export{g as default};
