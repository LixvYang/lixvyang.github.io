import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as u,b as s,f as l,d as a,a as t,e as k}from"./app-c1334058.js";const r="/assets/images/program/fsm/fsm3.png",d="/assets/images/program/fsm/order-fsm.png",v={},m={class:"hint-container tip"},b={href:"https://github.com/neolee/wop/blob/master/p2-b-fsm.ipynb",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/LixvYang/bilibili-go-tutorial/tree/main/fsm",target:"_blank",rel:"noopener noreferrer"};function g(q,n){const p=e("ExternalLinkIcon"),o=e("Mermaid");return i(),u("div",null,[n[6]||(n[6]=s("p",null,"有限状态机简称FSM(finite state machine),属于一看很高大上的概念(有着很深的理论背景),但其实真的不难理解，而且学会了就爱不释手，因为它解决某些问题真是太好用了。",-1)),n[7]||(n[7]=s("p",null,"简单来说，通过定义某个实例的一系列状态，当实例触发某些行为就可以在一系列状态中来回转换。",-1)),l(" more "),s("div",m,[n[3]||(n[3]=s("p",{class:"hint-container-title"},"参考",-1)),s("p",null,[n[1]||(n[1]=a("本教程参考 ")),s("a",b,[n[0]||(n[0]=a("欢迎进入编程世界——有限状态机")),t(p)]),n[2]||(n[2]=a("教程，感谢作者"))])]),n[8]||(n[8]=s("h2",{id:"什么是有限状态机",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么是有限状态机","aria-hidden":"true"},"#"),a(" 什么是有限状态机")],-1)),n[9]||(n[9]=s("p",null,"其实我们身边到处都是有限状态机的例子，比如你现在看本文的显示器屏幕，就有两个状态:亮和熄。屏幕可以从两种状态之间自由转换:",-1)),t(o,{id:"mermaid-18",code:"eJzT1dXlKsksyUm1Ung2Y9/zJbuezlzxvGvbs4bGZ3N2cYFkuYpTC0tT85JTXTIT04sSc7kUFJ7sWqega2en8LytxUrBQOFp6+aX09cCxYF8sDhQ3krBUOFZ5+Snexq4AJZ6K14="}),n[10]||(n[10]=s("p",null,'在这里我们的"亮"和"熄"就是"状态(state)"，箭头表示的就是状态之间可以发生"转换(transition)"，而剪头上标注的文字代表触发状态转换的"输入(input)"，这几本就是一个状态机的基本概念了。',-1)),n[11]||(n[11]=s("p",null,"显示器只有两个状态,没什么意思，我们来看一个最常见的红绿灯：",-1)),t(o,{id:"mermaid-25",code:"eJwrTi0sTc1LTnXJTEwvSszlUlAoySzJSVV4vmvR8937nzeuf9617VlD47M5u7iAchAhXTu7l7tbgAwrBUMFoGhefkmqQk5qWolCfpoCTMbEtPjpulnPpm97OnMFUA1EGKgTZDB2nTAZYxSNEFGQRrDdyBqLMtMzIDqhUmYGSFoBKEtnzw=="}),n[12]||(n[12]=k('<p>这里有:</p><ul><li>有三种状态：绿，黄，红；</li><li>状态转换是受限的，绿只能转黄，黄只能转红，红只能转绿；诸如黄转绿这样的状态转换是不允许的；</li><li>状态转换的输入条件很简单，接收到 1 就转换到下一个状态。</li></ul><p>简单来说，有限状态机就是一台预先定义好了各种状态的一组状态的机器，当机器接收到一个指令之后就根据指令内容查一张预先定义好的表:</p><ol><li>检查当前状态是否符合预期，即处于当前状态的机器是否接收具体指令</li><li>如果不接受，比如红灯状态接受到了2，那么什么都不会发生</li><li>如果接受，再检查表中“当前状态x该指令”对应的目标状态是什么，然后把机器状态转换为目标状态</li></ol><p>至于何时发送指令给状态机，那是由外部系统决定的，比如红绿灯的例子里，外部系统是几个定时器，时间到了就发信号给有限状态机切换状态。</p><p>有了现实生活中的例子打底，我们现在可以来看看抽象的“有限状态机（FSM）”是怎么定义的了。</p><figure><img src="'+r+'" alt="fsm3.png" tabindex="0" loading="lazy"><figcaption>fsm3.png</figcaption></figure><p>上图所示, 每个FSM都包含五个要素:</p><ul><li>Q 包含了有限个状态(states)的集合</li><li>∑ 包含了有限个、非空的有效输入(input)的集合</li><li>q0 起始状态</li><li>F 包含了所有“结束状态（final states）”的集合，这个名字容易误解，它的作用和有限状态机的具体类型及面对的问题有关，我们可以简单理解为“标记出来有特别含义的状态的集合”就可以了，注意这个集合可以是空的。</li><li>δ 一系列转换函数（transition functions），定义了什么样的当前状态结合什么输入可以变成什么目标状态，通常可以定义为一张二维表</li></ul><p>在计算机编程领域FSM最广泛的应用之一就是流程与行为控制(flow and behavior control)，简单来说就是管理:</p><ul><li>某个状态下什么能做什么不能做</li><li>做了什么会变成另一个状态</li></ul><p>现实世界中有许多应用FSM的地方，我们日常生活中最常用的就有电商系统的订单系统:</p><p>我们用过淘宝天猫的都知道，一个订单从创建开始就要经历好几个状态，中间也有不同的操作可以进行，下面是一个比较典型的流程设计，经过简化，并以“状态”的视角来描述:</p><figure><img src="'+d+`" alt="order-fsm.png" tabindex="0" loading="lazy"><figcaption>order-fsm.png</figcaption></figure><p>在这个状态机中包含着一系列状态和对应的状态转换行为，还有一系列操作没有展开，比如订单取消到订单退款的细节..</p><p>流程说明:</p><ul><li>当买家点击下单时订单生成，处于“已创建”状态；</li><li>这个状态下的正常操作是“支付”，如果输入“支付成功”会进入下一个状态“已支付”，“支付失败”或者没有任何操作则停在本状态；</li><li>这个状态下其他可选操作包括“修改”、“取消”等，分别会去到订单修改和订单取消子流程（这里略去细节）；</li><li>支付成功后进入处于“已支付”状态；</li><li>这个状态下需要等待商家发货，商家输入“已发货”会进入下一个状态“配送中”；</li><li>这个状态下不能修改订单了，但仍然可以取消订单；</li><li>商家发货后进入“配送中”状态；</li><li>当配送到货，买家签收成功输入则进入下一个状态“已签收”；如果配送失败（买家不在家之类的情况）则留在“配送中”状态（另外择时重新送货）；</li><li>这个状态下已不能修改和取消订单，但是可以发起退货申请，进入退货子流程（这里略去细节）；</li><li>买家签收后进入“已签收”状态；</li><li>买家满意，确认订单完成则进入最后状态“已完成”，订单生命周期结束；</li><li>否则买家可以发起退货进入退货子流程（略）。</li></ul><p>从这里我们可以看到，实际业务系统中状态和转换的规则相当复杂（我们这还是大大简化的版本），每个状态下允许的操作和可能转换的下一个状态都是严格受控的，现在我们思考一下，我们可以如何用程序来实现这样的流程呢？</p><h2 id="利用有限状态机编写易于维护的代码" tabindex="-1"><a class="header-anchor" href="#利用有限状态机编写易于维护的代码" aria-hidden="true">#</a> 利用有限状态机编写易于维护的代码</h2><p>回忆我们之前提到的，流程和行为控制（flow and behavior control）的关键是管理：</p><ul><li>某个状态下什么能做什么不能做</li><li>做了什么会变成另一个状态</li></ul><p>最简单的方式是写一堆<code>if...else</code>的判断规则：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">type</span> OrderState <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	CREATE OrderState <span class="token operator">=</span> <span class="token boolean">iota</span>
	PAID
	DELIVERING
	RECEIVED
	DONE
	CANCELLING
	RETURNING
	CLOSED
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	state OrderState
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Order <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Order<span class="token punctuation">{</span>
		state<span class="token punctuation">:</span> CREATE<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">can_pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> o<span class="token punctuation">.</span>state <span class="token operator">==</span> CREATE
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">can_deliver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> o<span class="token punctuation">.</span>state <span class="token operator">==</span> PAID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">can_cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> o<span class="token punctuation">.</span>state <span class="token operator">==</span> CREATE <span class="token operator">||</span> o<span class="token punctuation">.</span>state <span class="token operator">==</span> PAID
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">can_receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> o<span class="token punctuation">.</span>state <span class="token operator">==</span> DELIVERING
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">payment_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token comment">// 调用 RPC 接口完成支付</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span><span class="token function">can_pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ok <span class="token operator">:=</span> o<span class="token punctuation">.</span><span class="token function">payment_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
			o<span class="token punctuation">.</span>state <span class="token operator">=</span> PAID
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Order<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span><span class="token function">can_cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		o<span class="token punctuation">.</span>state <span class="token operator">=</span> CANCELLING
		<span class="token comment">// 取消订单，申请审批和清理数据，如果顺利成功再——</span>
		o<span class="token punctuation">.</span>state <span class="token operator">=</span> CLOSED
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
<span class="token comment">// 还有一大堆操作的函数，每一个里面都要判断状态是不是可以做想做操作</span>
<span class="token comment">// 然后根据执行的情况修改 o.state 为对应的新状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的代码非常冗长和重复，难以维护且难以修改，设想一下，假设在上面的基础上再增加一个状态，要连带修改不确定几处地方，做完这样的修改还需要相应修改所有的测试用例，累就不说了，关键是容易出错。</p><p>有限状态机实际上是这些“八股”的通用实现，然后提供一个非常简洁的接口供我们使用。有兴趣的话可以自己尝试用 Golang 写一个 FSM 的实现出来，只做最基本功能的话也不是很难，但我们实际上没必要自己写, Golang也有不少FSM的第三方实现，比如 <code>github.com/looplab/fsm</code> 这个库，我们就可以用它来展示一下上面的流程如何用 FSM 来实现:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>

	<span class="token string">&quot;github.com/looplab/fsm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	order <span class="token operator">:=</span> fsm<span class="token punctuation">.</span><span class="token function">NewFSM</span><span class="token punctuation">(</span>
		<span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span>
		fsm<span class="token punctuation">.</span>Events<span class="token punctuation">{</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;pay&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;paid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;deliver&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;paid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;delivering&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;receive&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;delivering&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;received&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;received&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;done&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;cancel&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;received&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;paid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;cancelling&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;return&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;delivering&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;received&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;returning&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> Src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cancelling&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;returning&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Dst<span class="token punctuation">:</span> <span class="token string">&quot;closed&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		fsm<span class="token punctuation">.</span>Callbacks<span class="token punctuation">{</span>
			<span class="token string">&quot;before_pay&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;支付服务申请中……&quot;</span><span class="token punctuation">)</span>
				<span class="token comment">// 发送 before_pay 服务</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">&quot;paid&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;支付成功&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">&quot;after_deliver&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;已通知用户：商品配送中&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">&quot;cancel&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;订单取消&quot;</span><span class="token punctuation">)</span>
				e<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">&quot;return&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;订单返回&quot;</span><span class="token punctuation">)</span>
				e<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token string">&quot;close&quot;</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> e <span class="token operator">*</span>fsm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;订单关闭&quot;</span><span class="token punctuation">)</span>
				e<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	err <span class="token operator">:=</span> order<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;pay&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	err <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;deliver&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	err <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;receive&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	err <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;confirm&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 输出</span>
<span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>
created
支付服务申请中……
支付成功
paid
已通知用户：商品配送中
delivering
received
done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了具体业务执行的代码，上面基本上完整实现了流程控制的部分，值得注意的是，借助 FSM 的实现，不仅简洁易懂，而且易于维护，假定我们需要对流程规则进行修改，或者在某些状态转换的前后添加一些操作，我们通常都只需要修改一处代码，而不用到处找哪里还要改。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>以上介绍了重要的数据模型“有限状态机（FSM）”，需要理解其背后的现实世界模型、具体应用及其带来的好处。</p><p>FSM 是对程序中一组的状态进行管理的工具；<br> FSM 能够精简程序里的逻辑判断，我们只需要陈述规则，FSM 自动管理什么可以什么不可以；<br> 尝试体会和理解 FSM 背后的抽象思维方式，如何从特定问题中抽象出可以普遍应用的通用工具。</p><h1 id="go-实现有限状态机" tabindex="-1"><a class="header-anchor" href="#go-实现有限状态机" aria-hidden="true">#</a> Go 实现有限状态机</h1><p>通过以上的讲解，你应该可以看清楚有限状态机的运行以及使用过程，那么我们接下来使用Go语言写一个最简单的FSM:</p><p>这只是一个差不多50行的代码，所以很简陋，但是可以将状态机的最基础使用包含:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;errors&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Transition <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	from  <span class="token builtin">string</span>
	to    <span class="token builtin">string</span>
	event <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> StateMachine <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	state       <span class="token builtin">string</span>
	transitions <span class="token punctuation">[</span><span class="token punctuation">]</span>Transition
	handleEvent <span class="token keyword">func</span><span class="token punctuation">(</span>fromState <span class="token builtin">string</span><span class="token punctuation">,</span> toState <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewStateMachine</span><span class="token punctuation">(</span>init <span class="token builtin">string</span><span class="token punctuation">,</span> transitions <span class="token punctuation">[</span><span class="token punctuation">]</span>Transition<span class="token punctuation">,</span> handleEvent <span class="token keyword">func</span><span class="token punctuation">(</span>fromState <span class="token builtin">string</span><span class="token punctuation">,</span> toState <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token operator">*</span>StateMachine <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>StateMachine<span class="token punctuation">{</span>
		state<span class="token punctuation">:</span>       init<span class="token punctuation">,</span>
		transitions<span class="token punctuation">:</span> transitions<span class="token punctuation">,</span>
		handleEvent<span class="token punctuation">:</span> handleEvent<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>StateMachine<span class="token punctuation">)</span> <span class="token function">changeState</span><span class="token punctuation">(</span>state <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">.</span>state <span class="token operator">=</span> state
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>StateMachine<span class="token punctuation">)</span> <span class="token function">findTransMatching</span><span class="token punctuation">(</span>fromState <span class="token builtin">string</span><span class="token punctuation">,</span> event <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Transition <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m<span class="token punctuation">.</span>transitions <span class="token punctuation">{</span>
		<span class="token keyword">if</span> v<span class="token punctuation">.</span>from <span class="token operator">==</span> fromState <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>event <span class="token operator">==</span> event <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token operator">&amp;</span>v
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>StateMachine<span class="token punctuation">)</span> <span class="token function">Trigger</span><span class="token punctuation">(</span>event <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	trans <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">findTransMatching</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> event<span class="token punctuation">)</span>
	<span class="token keyword">if</span> trans <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;转换状态失败: 未找到trans&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> trans<span class="token punctuation">.</span>event <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;未找到具体的event&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	err <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>state<span class="token punctuation">,</span> trans<span class="token punctuation">.</span>to<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;转换状态失败: 未找到handleEvent&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	m<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span>trans<span class="token punctuation">.</span>to<span class="token punctuation">)</span>

	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	transitions <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Transition<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	transitions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>transitions<span class="token punctuation">,</span> Transition<span class="token punctuation">{</span>
		from<span class="token punctuation">:</span>  <span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span>
		to<span class="token punctuation">:</span>    <span class="token string">&quot;running&quot;</span><span class="token punctuation">,</span>
		event<span class="token punctuation">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	transitions <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>transitions<span class="token punctuation">,</span> Transition<span class="token punctuation">{</span>
		from<span class="token punctuation">:</span>  <span class="token string">&quot;running&quot;</span><span class="token punctuation">,</span>
		to<span class="token punctuation">:</span>    <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span>
		event<span class="token punctuation">:</span> <span class="token string">&quot;work&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	fsm <span class="token operator">:=</span> <span class="token function">NewStateMachine</span><span class="token punctuation">(</span><span class="token string">&quot;create&quot;</span><span class="token punctuation">,</span> transitions<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>fromState <span class="token builtin">string</span><span class="token punctuation">,</span> toState <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> toState <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;工作结束&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fsm<span class="token punctuation">.</span><span class="token function">Trigger</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>
	fsm<span class="token punctuation">.</span><span class="token function">Trigger</span><span class="token punctuation">(</span><span class="token string">&quot;work&quot;</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fsm<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)),s("p",null,[n[5]||(n[5]=a("代码仓库地址: ")),s("a",f,[n[4]||(n[4]=a("https://github.com/LixvYang/bilibili-go-tutorial/tree/main/fsm")),t(p)])])])}const S=c(v,[["render",g],["__file","fsm.html.vue"]]);export{S as default};
