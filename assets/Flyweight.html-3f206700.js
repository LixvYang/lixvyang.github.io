import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,b as t,f as p,e as o}from"./app-b6e19e4c.js";const i={};function c(l,n){return a(),e("div",null,[n[0]||(n[0]=t("p",null,"享元模式(Flyweight)主要用于减少创建对象的数量,以减少内存占用和提高性能。这种类型的设计模式属于结构型模式,它提供了减少对象数量从而改善应用所需的对象结构的方式。",-1)),p(" more "),n[1]||(n[1]=o(`<h1 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式" aria-hidden="true">#</a> 享元模式</h1><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><p>享元模式尝试重用现有的同类对象,如果未找到匹配的对象,则创建新对象。</p><p>模式通过共享多个对象的部分状态来实现上述功能。 换句话来说， 享元会将不同对象的相同数据进行缓存以节省内存。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Flyweight <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token comment">// 公共状态 </span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> FlyweightFactory <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  pool <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Flyweight
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>FlyweightFactory<span class="token punctuation">)</span> <span class="token function">GetFlyweight</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Flyweight <span class="token punctuation">{</span>
  <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">.</span>pool<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v 
  <span class="token punctuation">}</span>
  <span class="token comment">// 共享实例</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Flyweight<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>享元模式通过与共享对象减少内存使用和对象创建,并可以细粒度地控制对象粒度,是一种常见和有效的优化设计模式。</p>`,8))])}const d=s(i,[["render",c],["__file","Flyweight.html.vue"]]);export{d as default};
