import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as e,b as s,f as u,d as a,a as i,e as l}from"./app-c1334058.js";const k={},r={href:"https://github.com/bytedance/mockey",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const t=o("ExternalLinkIcon");return c(),e("div",null,[n[1]||(n[1]=s("p",null,"在单元测试中我们经常需要用到Mock功能，简单来说就是直接模拟我们需要测试方法中的一些接口、函数、方法的返回值，让我们更容易去写Unit Test。",-1)),u(" more "),n[2]||(n[2]=s("h1",{id:"mockey-教程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#mockey-教程","aria-hidden":"true"},"#"),a(" Mockey 教程")],-1)),n[3]||(n[3]=s("p",null,"mock在单元测试中非常重要，mock可以理解为构建一个替换的功能，可以是完整接口的替换，又或者是某个类下方法的替换。",-1)),n[4]||(n[4]=s("p",null,"本文介绍一下Go语言里字节开源的的Mockey框架。",-1)),s("p",null,[s("a",r,[n[0]||(n[0]=a("https://github.com/bytedance/mockey")),i(t)])]),n[5]||(n[5]=l(`<p>在github的README下有一个一句话值得注意:</p><div class="hint-container info"><p class="hint-container-title">信息</p><p>The bottom layer is monkey patch realized by rewriting function instructions at runtime.</p></div><p>由此我们可以理解，mockey其实是通过在运行时重写函数指令实现的monkey patch。</p><p>mockey支持的功能如下</p><ol><li>mock 函数和方法 <ul><li>基础功能 <ul><li>普通/可变参数函数</li><li>普通/可变参数方法</li><li>嵌套结构体方法</li><li>私有类型的导出方法（不同包下）</li></ul></li><li>高级功能 <ul><li>mock 后执行原函数</li><li>goroutine 条件过滤</li><li>增量改变 mock 行为</li><li>获取原函数执行次数</li><li>获取 mock 函数执行次数</li></ul></li></ul></li><li>mock 变量 <ul><li>普通变量</li><li>函数变量</li></ul></li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>bytedance<span class="token operator">/</span>mockey@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;testing&quot;</span>

	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/bytedance/mockey&quot;</span>
	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/smartystreets/goconvey/convey&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>in <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> in
<span class="token punctuation">}</span>

<span class="token keyword">type</span> A <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>in <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> in <span class="token punctuation">}</span>

<span class="token keyword">var</span> Bar <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">func</span> <span class="token function">TestMockXXX</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;TestMockXXX&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">Mock</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// mock函数 </span>
		<span class="token function">Mock</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// mock方法 </span>
		<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// mock变量 </span>

		<span class="token function">So</span><span class="token punctuation">(</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>        <span class="token comment">// 断言\`Foo\`成功mock </span>
		<span class="token function">So</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 断言\`A.Foo\`成功mock </span>
		<span class="token function">So</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment">// 断言\`Bar\`成功mock </span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// \`PatchConvey\`外自动释放mock</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// a</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// b</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span>             <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质上上面的代码最核心的就这三行MockXX函数:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    <span class="token function">Mock</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// mock函数 </span>
		<span class="token function">Mock</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// mock方法 </span>
		<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">// mock变量 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要做的就只有在Mock函数里填入希望Mock的函数、方法，然后填入我们希望返回的对应的Return值==(这里的Return类型需要与前面的Mock里的返回值相对应)==，最后我们调用Build就可以完成，非常简单。</p><p>整个函数在PatchConvey局部函数作用域里，不需要defer来释放。</p><p>由此你也发现了，Mockey不像Gomock一样会模拟整个接口来进行单测，反而是通过更精细化的函数或者某个类的方法来进行单测，针对开发人员提升单测速度非常友好。</p><h3 id="mock变量" tabindex="-1"><a class="header-anchor" href="#mock变量" aria-hidden="true">#</a> Mock变量</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> Bar <span class="token operator">=</span> <span class="token number">0</span>
<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// mock方法 		</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>MockValue()里是需要变量提供地址的</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：Go语言中常量会内联优化，所以你是不可以取到一个常量的地址的。比如这样..</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> MAX_INT <span class="token operator">=</span> <span class="token number">1e10</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>所以事实上你也是不可以Mock来修改常量的,因为你取不到它的地址:)</mark></p></div><p>接下来就需要一个<code>To</code>来设置mock的新值:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// main.go</span>
<span class="token keyword">var</span> MAX_INT <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;testing&quot;</span>

	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/bytedance/mockey&quot;</span>
	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/smartystreets/goconvey/convey&quot;</span>
	<span class="token string">&quot;github.com/stretchr/testify/assert&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token function">TestMockXXX</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;TestOK1&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>MAX_INT<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;TestOK2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
			<span class="token function">So</span><span class="token punctuation">(</span>MAX_INT<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> MAX_INT<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> MAX_INT <span class="token operator">!=</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;t != 2&lt;&lt;10&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>go test -gcflags=&quot;all=-l -N&quot; -v -run=TestMockXXX </code>,(实际上我们注释了//go:noinline)，也就不需要-gcflags=&quot;all=-l -N&quot;了</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>➜  demo_ut_go <span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>run<span class="token operator">=</span>TestMockXXX
<span class="token operator">==</span><span class="token operator">=</span> RUN   TestMockXXX

  TestOK1 ✔
    TestOK2 ✔


<span class="token number">2</span> total assertions

<span class="token operator">--</span><span class="token operator">-</span> PASS<span class="token punctuation">:</span> TestMockXXX <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00s<span class="token punctuation">)</span>
PASS
ok      main       <span class="token number">0</span><span class="token punctuation">.</span>351s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消mock能力？</p><p>实际上不仅仅有Patch,还有UnPatch能力..</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;TestOK1&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>MAX_INT<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;TestOK2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">MockValue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MAX_INT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnPatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 错误</span>
			<span class="token function">So</span><span class="token punctuation">(</span>MAX_INT<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
			<span class="token comment">// 正确</span>
			<span class="token function">So</span><span class="token punctuation">(</span>MAX_INT<span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mock函数-方法" tabindex="-1"><a class="header-anchor" href="#mock函数-方法" aria-hidden="true">#</a> Mock函数 &amp; 方法</h3><p>我们在Mock函数/方法时需要分三步进行：</p><ol><li>明确Mock的函数/方法</li><li>明确返回值</li><li>Build</li></ol><p>所以你在示例里看到Mock的函数/方法就可以这样表示:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">Mock</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// mock函数 </span>
<span class="token function">Mock</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// mock方法 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们来讲解每一个详细步骤的使用方式,针对Mock函数，我们需要传入我们需要mock的对象，比如对方法就是Foo,对类别函数就是A.Foo,对指针类型方法就是(*A).Bar。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;testing&quot;</span>

	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/bytedance/mockey&quot;</span>
	<span class="token punctuation">.</span> <span class="token string">&quot;github.com/smartystreets/goconvey/convey&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">type</span> A <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Foo</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>A<span class="token punctuation">)</span> <span class="token function">Bar</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token comment">//go:noinline</span>
<span class="token keyword">func</span> <span class="token function">Test_Mock</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;testXXX&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">Mock</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">Mock</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">Mock</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;33&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token function">So</span><span class="token punctuation">(</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;33&quot;</span><span class="token punctuation">)</span>
		mockA <span class="token operator">:=</span> <span class="token operator">&amp;</span>A<span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token function">So</span><span class="token punctuation">(</span>mockA<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>mockA<span class="token punctuation">.</span><span class="token function">Bar</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 测试</span>
<span class="token keyword">go</span> test <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token string">&quot;all=-l -N&quot;</span> <span class="token operator">-</span>v <span class="token operator">-</span>run<span class="token operator">=</span>Test_Mock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以Mock函数和设置条件:</p><p>当我们限定我们的mock只有达到一定条件才触发时，可以使用When()方法。</p><p>而且我们还可以统计被Mock的函数/方法的调用次数<code>MockTimes()</code>，和原函数的调用次数<code>Times()</code>。</p><p>如果我们没有对函数/方法指定When，那么二者被调用的次数应该是相同的。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  <span class="token function">PatchConvey</span><span class="token punctuation">(</span><span class="token string">&quot;Testxxx&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		m <span class="token operator">:=</span> <span class="token function">Mock</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">When</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">MockTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token function">Foo</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
		<span class="token function">So</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token comment">// 这里的Foo(&quot;c&quot;) 没有触发上面的When(func(a string) bool { return a == &quot;a&quot; }) 所以MockTimes是 1</span>
		<span class="token function">So</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">MockTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ShouldEqual<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至我们还可以自己来关闭mock代理, 和之前的变量一样通过Patch和UnPatch来关闭Mocker。</p><h2 id="禁用内联优化" tabindex="-1"><a class="header-anchor" href="#禁用内联优化" aria-hidden="true">#</a> 禁用内联优化</h2><div class="hint-container danger"><p class="hint-container-title">警告</p><p>使用monkey、patch等库需要我们禁止内联，否则可能导致mock失败</p></div><p>我们上面曾经用过</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> test <span class="token operator">-</span>gcflags<span class="token operator">=</span><span class="token string">&quot;all=-l -N&quot;</span> <span class="token operator">-</span>v <span class="token operator">-</span>run<span class="token operator">=</span>TestXXX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但其实可以在单测的代码加注释<code>//go:noinline</code>告诉编译器自己取消内联优化.</p><h2 id="重复mock问题" tabindex="-1"><a class="header-anchor" href="#重复mock问题" aria-hidden="true">#</a> 重复Mock问题</h2><p>在同一个PatchConvey里重复mock一个函数会报错，所以需要的话可以重新开一个Patch去Mock。</p>`,47))])}const g=p(k,[["render",d],["__file","mockey.html.vue"]]);export{g as default};
