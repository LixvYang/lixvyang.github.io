import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as a,d as s,f as i,e as p,a as u}from"./app-4b201fac.js";const r={},k={href:"http://main.rs",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const t=o("ExternalLinkIcon");return c(),l("div",null,[n[3]||(n[3]=a("p",null,[s("每一门语言的错误处理都很重要，重要到可能成为被喷的点比如 Go 的 "),a("code",null,"if err != nil "),s("，比起 Go， Rust的错误处理可谓是集百家之长。")],-1)),i(" more "),n[4]||(n[4]=p(`<h1 id="rust错误处理" tabindex="-1"><a class="header-anchor" href="#rust错误处理" aria-hidden="true">#</a> Rust错误处理</h1><p>任何语言的错误处理基本可以分为两大部分:</p><ul><li>可恢复的(recoverable)</li><li>不可恢复的(unrecoverable)</li></ul><p>对于前者而言，我们可能只需要打印日志提醒用户——此处代码发生了错误而已。<br> 可对于后者，这种错误很可能就是程序崩溃(BUG)的前兆,比如项目初始化失败、找不到配置文件、访问数组索引越界等等，我们要对这类错误立即处理。</p><p>大多数语言对于这两者的处理是很模糊的，并经常采用统一的异常来处理。</p><p>比如Go语言的错误处理一般就是:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Msg</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Rust没有异常，相反，它有<code>Result&lt;T, E&gt;</code>类型来处理可恢复的错误；使用<code>panic!</code>宏来处理程序遇到的不可恢复的错误。</p><p>我们先讲解<code>panic!</code>这类处理不可恢复的错误，因为比较简单😜</p><p>下面的示例借鉴(Copy)Rust Book，没办法...写的示例确实好👍</p><h2 id="panic-处理不可恢复的错误" tabindex="-1"><a class="header-anchor" href="#panic-处理不可恢复的错误" aria-hidden="true">#</a> <code>panic!</code>处理不可恢复的错误😱</h2><p>panic顾名思义就是直译就是恐慌的意思，会让程序直接退出。</p><p>有两种情况会导致panic，一种是程序异常(比如访问数组索引越界)，另一种是自己手动<code>panic</code>。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;main panic!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段程序会直接输出:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cargo run
   Compiling panic v0.1.0 (file:///projects/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0.25s
     Running \`target/debug/panic\`
thread &#39;main&#39; panicked at &#39;main panic!!!&#39;, src/main.rs:2:5
note: run with \`RUST_BACKTRACE=1\` environment variable to display a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后两行是<code>panic</code>调用的错误信息，第一行显示了 panic 提供的信息并指明了源码中 panic 出现的位置：src/main.rs:2:5 表明这是 src/main.rs 文件的第二行第五个字符。也就是我们手动<code>panic!(&quot;main panic!!!&quot;);</code>的这一行代码。</p><p>我们还可以通过panic后的backtrace追踪出错信息。</p><p>使用 panic! 的 backtrace</p><p>让我们来看看另一个因为我们代码中的 bug 引起的别的库中 panic! 的例子，而不是直接的宏调用。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    v<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里尝试访问 vector 的第一百个元素（这里的索引是 99 因为索引从 0 开始），不过它只有三个元素。这种情况下 Rust 会 panic。[] 应当返回一个元素，不过如果传递了一个无效索引，就没有可供 Rust 返回的正确的元素。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在C语言中，这样的尝试是未知的(不会直接报错)，所以会有潜在的安全漏洞。</p></div><p>为了保护程序远离这类漏洞，如果尝试读取一个索引不存在的元素，Rust 程序会crash:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>cargo run

   <span class="token class-name">Compiling</span> panic v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//projects/panic)</span>
    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>27s
     <span class="token class-name">Running</span> \`target<span class="token operator">/</span>debug<span class="token operator">/</span>panic\`
thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;index</span> out of bounds<span class="token punctuation">:</span> the len is <span class="token number">3</span> but the index is <span class="token number">99</span>&#39;<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span>
note<span class="token punctuation">:</span> run with \`<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>\` environment variable to display a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)),a("p",null,[n[1]||(n[1]=s("错误指向 ")),a("a",k,[n[0]||(n[0]=s("main.rs")),u(t)]),n[2]||(n[2]=s(" 的第 4 行，这里我们尝试访问索引 99。"))]),n[5]||(n[5]=p(`<p>下面的说明（note）行提醒我们可以设置 RUST_BACKTRACE 环境变量来得到一个 backtrace。</p><p>backtrace 是一个执行到目前位置所有被调用的函数的列表。Rust 的 backtrace 跟其他语言中的一样：阅读 backtrace 的关键是从头开始读直到发现你编写的文件。</p><p>这就是问题的发源地。这一行往上是你的代码所调用的代码；往下则是调用你的代码的代码。这些行可能包含核心 Rust 代码，标准库代码或用到的 crate 代码。让我们将 RUST_BACKTRACE 环境变量设置为任何不是 0 的值来获取 backtrace 看看。示例展示了与你看到类似的输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span> cargo run

    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>00s
     <span class="token class-name">Running</span> \`target<span class="token operator">/</span>debug<span class="token operator">/</span>ownership\`
thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;index</span> out of bounds<span class="token punctuation">:</span> the len is <span class="token number">3</span> but the index is <span class="token number">99</span>&#39;<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span>
stack backtrace<span class="token punctuation">:</span>
   <span class="token number">0</span><span class="token punctuation">:</span> rust_begin_unwind
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>std<span class="token operator">/</span>src<span class="token operator">/</span>panicking<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">593</span><span class="token punctuation">:</span><span class="token number">5</span>
   <span class="token number">1</span><span class="token punctuation">:</span> <span class="token namespace">core<span class="token punctuation">::</span>panicking<span class="token punctuation">::</span></span>panic_fmt
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>core<span class="token operator">/</span>src<span class="token operator">/</span>panicking<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">67</span><span class="token punctuation">:</span><span class="token number">14</span>
   <span class="token number">2</span><span class="token punctuation">:</span> <span class="token namespace">core<span class="token punctuation">::</span>panicking<span class="token punctuation">::</span></span>panic_bounds_check
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>core<span class="token operator">/</span>src<span class="token operator">/</span>panicking<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">162</span><span class="token punctuation">:</span><span class="token number">5</span>
   <span class="token number">3</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">usize</span> <span class="token keyword">as</span> <span class="token namespace">core<span class="token punctuation">::</span>slice<span class="token punctuation">::</span>index<span class="token punctuation">::</span></span><span class="token class-name">SliceIndex</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">::</span>index
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>core<span class="token operator">/</span>src<span class="token operator">/</span>slice<span class="token operator">/</span>index<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">258</span><span class="token punctuation">:</span><span class="token number">10</span>
   <span class="token number">4</span><span class="token punctuation">:</span> <span class="token namespace">core<span class="token punctuation">::</span>slice<span class="token punctuation">::</span></span><span class="token function">index</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">impl</span> <span class="token namespace">core<span class="token punctuation">::</span>ops<span class="token punctuation">::</span>index<span class="token punctuation">::</span></span><span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">I</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">::</span>index
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>core<span class="token operator">/</span>src<span class="token operator">/</span>slice<span class="token operator">/</span>index<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token number">9</span>
   <span class="token number">5</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token namespace">alloc<span class="token punctuation">::</span>vec<span class="token punctuation">::</span></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token keyword">as</span> <span class="token namespace">core<span class="token punctuation">::</span>ops<span class="token punctuation">::</span>index<span class="token punctuation">::</span></span><span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">I</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">::</span>index
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>alloc<span class="token operator">/</span>src<span class="token operator">/</span>vec<span class="token operator">/</span><span class="token keyword">mod</span><span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">2690</span><span class="token punctuation">:</span><span class="token number">9</span>
   <span class="token number">6</span><span class="token punctuation">:</span> <span class="token namespace">ownership<span class="token punctuation">::</span></span>main
             at <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span>
   <span class="token number">7</span><span class="token punctuation">:</span> <span class="token namespace">core<span class="token punctuation">::</span>ops<span class="token punctuation">::</span>function<span class="token punctuation">::</span></span><span class="token class-name">FnOnce</span><span class="token punctuation">::</span>call_once
             at <span class="token operator">/</span>rustc<span class="token operator">/</span>eb26296b556cef10fb713a38f3d16b9886080f26<span class="token operator">/</span>library<span class="token operator">/</span>core<span class="token operator">/</span>src<span class="token operator">/</span>ops<span class="token operator">/</span>function<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">250</span><span class="token punctuation">:</span><span class="token number">5</span>
note<span class="token punctuation">:</span> <span class="token class-name">Some</span> details are omitted<span class="token punctuation">,</span> run with \`<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span>full\` <span class="token keyword">for</span> a verbose backtrace<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你实际看到的输出可能因不同的操作系统和 Rust 版本而有所不同。</p><p>我们的</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token number">6</span><span class="token punctuation">:</span> <span class="token namespace">ownership<span class="token punctuation">::</span></span>main
             at <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到具体出现问题的行数，其他的可能是rust标准库、crate的代码。</p><h2 id="result-t-e-处理可恢复的错误" tabindex="-1"><a class="header-anchor" href="#result-t-e-处理可恢复的错误" aria-hidden="true">#</a> <code>Result&lt;T, E&gt;</code>处理可恢复的错误 😕</h2><p>大部分错误其实没有严重到需要程序立即退出。比如一个函数可以打开某个文件夹里的文件，但此时这个文件不存在，那么就需要返回错误让调用方先创建这个文件再次执行。而不是让整个进程中止。</p><p>我们先来回忆一下<code>Result</code>的枚举类型是什么:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T 和 E 是泛型类型参数。具体来说Result是一个盲盒，如果结果没问题，那就是返回<code>T</code>类型的OK(T),如果结果有错误那就返回<code>E</code>类型的Err(E),二选一。</p><p>让我们调用一个返回 Result 的函数，因为它打开一个文件，并且可能会失败：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/main.rs</span>

<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting_file_result <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>File::open</code>返回的是<code>Result&lt;T, E&gt;</code>.如果调用成功，则泛型参数 T 会被 File::open 的实现放入成功返回值的类型 std::fs::File，这是一个文件句柄。</p><p>错误返回值使用的 E 的类型是 std::io::Error。这些返回类型意味着 File::open 调用可能成功并返回一个可以读写的文件句柄。</p><p>这个函数调用也可能会失败：例如，也许文件不存在，或者可能没有权限访问这个文件。File::open 函数需要一个方法在告诉我们成功与否的同时返回文件句柄或者错误信息。这些信息正好是 Result 枚举所代表的。</p><p>当 File::open 成功时，greeting_file_result 变量将会是一个包含文件句柄的 Ok 实例。当失败时，greeting_file_result 变量将会是一个包含了更多关于发生了何种错误的信息的 Err 实例。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting_file_result <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> greeting_file <span class="token operator">=</span> <span class="token keyword">match</span> greeting_file_result <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem opening the file: {:?}&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意与 Option 枚举一样，Result 枚举和其成员也被导入到了 prelude 中，所以就不需要在 match 分支中的 Ok 和 Err 之前指定 Result::。</p><p>这里我们告诉 Rust 当结果是 Ok 时，返回 Ok 成员中的 file 值，然后将这个文件句柄赋值给变量 greeting_file。match 之后，我们可以利用这个文件句柄来进行读写。</p><p>match 的另一个分支处理从 File::open 得到 Err 值的情况。在这种情况下，我们选择调用 panic! 宏。如果当前目录没有一个叫做 hello.txt 的文件，当运行这段代码时会看到如下来自 panic! 宏的输出：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>$ cargo run
   <span class="token class-name">Compiling</span> error<span class="token operator">-</span>handling v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//projects/error-handling)</span>
    <span class="token class-name">Finished</span> dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>73s
     <span class="token class-name">Running</span> \`target<span class="token operator">/</span>debug<span class="token operator">/</span>error<span class="token operator">-</span>handling\`
thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;Problem</span> opening the file<span class="token punctuation">:</span> <span class="token class-name">Os</span> <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> kind<span class="token punctuation">:</span> <span class="token class-name">NotFound</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&quot;No such file or directory&quot;</span> <span class="token punctuation">}</span>&#39;<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">23</span>
note<span class="token punctuation">:</span> run with \`<span class="token constant">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span>\` environment variable to display a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上我们还可以对错误信息进行处理。</p><p>不管 File::open 是因为什么原因失败都会 panic!。</p><p>我们真正希望的是对不同的错误原因采取不同的行为：如果 File::open 因为文件不存在而失败，我们希望创建这个文件并返回新文件的句柄。如果 File::open 因为任何其他原因失败，例如没有打开文件的权限，我们仍然希望 panic!。让我们看看下面的代码示例，其中 match 增加了另一个分支：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting_file_result <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> greeting_file <span class="token operator">=</span> <span class="token keyword">match</span> greeting_file_result <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fc<span class="token punctuation">,</span>
                <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem creating the file: {:?}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            other_error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Problem opening the file: {:?}&quot;</span><span class="token punctuation">,</span> other_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的...我们还可以通过匹配error的类型进一步match。。。</p><h3 id="不处理result" tabindex="-1"><a class="header-anchor" href="#不处理result" aria-hidden="true">#</a> 不处理Result</h3><p>如果针对这类<code>Result</code>不想处理，如果返回错误值接<code>panic</code>，那我们就可以用<code>unwrap</code>和<code>expect</code>。</p><p>match 能够胜任它的工作，不过它可能有点冗长并且不总是能很好的表明其意图。<code>Result&lt;T, E&gt;</code> 类型定义了很多辅助方法来处理各种情况。其中之一叫做 <code>unwrap</code>，它的实现就类似于 match 语句。如果 Result 值是成员 Ok，unwrap 会返回 Ok 中的值。如果 Result 是成员 Err，unwrap 会为我们调用 panic!。这里是一个实践 unwrap 的例子：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting_file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果调用这段代码时不存在 hello.txt 文件，我们将会看到一个 unwrap 调用 panic! 时提供的错误信息：</p><p>真男人的代码特别稳定，要么一直运行，要么直接panic...</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;called</span> \`<span class="token class-name">Result</span><span class="token punctuation">::</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\` on an \`<span class="token class-name">Err</span>\` value<span class="token punctuation">:</span> <span class="token class-name">Os</span> <span class="token punctuation">{</span>
code<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> kind<span class="token punctuation">:</span> <span class="token class-name">NotFound</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&quot;No such file or directory&quot;</span> <span class="token punctuation">}</span>&#39;<span class="token punctuation">,</span>
src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>expect 与 unwrap 的使用方式一样，不同之处是可以添加错误信息:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting_file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt should be included in this project&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>thread <span class="token lifetime-annotation symbol">&#39;main</span>&#39; panicked at <span class="token lifetime-annotation symbol">&#39;hello</span><span class="token punctuation">.</span>txt should be included <span class="token keyword">in</span> this project<span class="token punctuation">:</span> <span class="token class-name">Error</span>
<span class="token punctuation">{</span> repr<span class="token punctuation">:</span> <span class="token class-name">Os</span> <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">&quot;No such file or directory&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>&#39;<span class="token punctuation">,</span>
src<span class="token operator">/</span>libcore<span class="token operator">/</span>result<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">906</span><span class="token punctuation">:</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传播错误" tabindex="-1"><a class="header-anchor" href="#传播错误" aria-hidden="true">#</a> 传播错误</h3><p>当编写一个其实先会调用一些可能会失败的操作的函数时，除了在这个函数中处理错误外，还可以选择让调用者知道这个错误并决定该如何处理。这被称为 传播（propagating）错误，这样能更好的控制代码调用，因为比起你代码所拥有的上下文，调用者可能拥有更多信息或逻辑来决定应该如何处理错误。</p><p>展示了一个从文件中读取用户名的函数。如果文件不存在或不能读取，这个函数会将这些错误返回给调用它的代码：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> username_file_result <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> username_file <span class="token operator">=</span> <span class="token keyword">match</span> username_file_result <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> username <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">match</span> username_file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数可以编写成更加简短的形式，不过我们以大量手动处理开始以便探索错误处理；在最后我们会展示更短的形式。让我们看看函数的返回值：Result&lt;String, io::Error&gt;。这意味着函数返回一个 Result&lt;T, E&gt; 类型的值，其中泛型参数 T 的具体类型是 String，而 E 的具体类型是 io::Error。</p><p>如果这个函数没有出任何错误成功返回，函数的调用者会收到一个包含 String 的 Ok 值 —— 函数从文件中读取到的用户名。如果函数遇到任何错误，函数的调用者会收到一个 Err 值，它储存了一个包含更多这个问题相关信息的 io::Error 实例。这里选择 io::Error 作为函数的返回值是因为它正好是函数体中那两个可能会失败的操作的错误返回值：File::open 函数和 read_to_string 方法。</p><p>函数体以调用 File::open 函数开始。接着使用 match 处理返回值 Result如果 File::open 成功了，模式变量 file 中的文件句柄就变成了可变变量 username_file 中的值，接着函数继续执行。在 Err 的情况下，我们没有调用 panic!，而是使用 return 关键字提前结束整个函数，并将来自 File::open 的错误值（现在在模式变量 e 中）作为函数的错误值传回给调用者。</p><p>所以如果 username_file 中有了一个文件句柄，该数接着在变量 username 中创建了一个新 String 并调用文件句柄 username_file 的 read_to_string 方法来将文件的内容读取到 username 中。read_to_string 方法也会返回一个 Result，因为它可能会失败，哪怕是 File::open 已经成功了。所以我们需要另一个 match 来处理这个 Result：如果 read_to_string 成功了，那么这个函数就成功了，并返回文件中的用户名，它现在位于被封装进 Ok 的 username 中。如果read_to_string 失败了，则像之前处理 File::open 的返回值的 match 那样返回错误值。不过并不需要显式地调用 return，因为这是函数的最后一个表达式。</p><p>调用这个函数的代码最终会得到一个包含用户名的 Ok 值，或者一个包含 io::Error 的 Err 值。我们无从得知调用者会如何处理这些值。例如，如果他们得到了一个 Err 值，他们可能会选择 panic! 并使程序崩溃、使用一个默认的用户名或者从文件之外的地方寻找用户名。我们没有足够的信息知晓调用者具体会如何尝试，所以将所有的成功或失败信息向上传播，让他们选择合适的处理方法。</p><p>这种传播错误的模式在 Rust 是如此的常见，以至于 Rust 提供了 ? 问号运算符来使其更易于处理。</p><h3 id="传播错误的简写-运算符" tabindex="-1"><a class="header-anchor" href="#传播错误的简写-运算符" aria-hidden="true">#</a> 传播错误的简写：? 运算符</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> username_file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> username <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    username_file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> username<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单吧，它实现了和上面代码相同的功能。</p><p>? 运算符消除了大量样板代码并使得函数的实现更简单。我们甚至可以在 ? 之后直接使用链式方法调用来进一步缩短代码。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Read</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> username <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> username<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面展示了一个使用 fs::read_to_string 的更为简短的写法：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将文件读取到一个字符串是相当常见的操作，所以 Rust 提供了名为 fs::read_to_string 的函数，它会打开文件、新建一个 String、读取文件的内容，并将内容放入 String，接着返回它。当然，这样做就没有展示所有这些错误处理的机会了，所以我们最初就选择了艰苦的道路。</p><p>Option也可以用?操作符号。</p><p>? 运算符只能被用于返回值与 ? 作用的值相兼容的函数。因为 ? 运算符被定义为从函数中提早返回一个值，这与 match 表达式有着完全相同的工作方式。match 作用于一个 Result 值，提早返回的分支返回了一个 Err(e) 值。函数的返回值必须是 Result 才能与这个 return 相兼容。</p>`,59))])}const g=e(r,[["render",d],["__file","error-handle.html.vue"]]);export{g as default};
