import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,b as s,f as u,d as a,a as t,e as p}from"./app-0e06fe0b.js";const r={},d={href:"https://developers.google.com/protocol-buffers/docs/proto3",target:"_blank",rel:"noopener noreferrer"},k={href:"https://protobuf.dev/programming-guides/proto3/#scalar",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const e=i("ExternalLinkIcon");return l(),c("div",null,[n[2]||(n[2]=s("p",null,"本篇文章，我会介绍一下gRPC常见的语法以及常见的包的调用，让大家快速入门gRPC,以便我们快速对gRPC的语法快速熟悉起来。",-1)),u(" more "),n[3]||(n[3]=s("h1",{id:"grpc教程-5-grpc语法和常见包的使用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#grpc教程-5-grpc语法和常见包的使用","aria-hidden":"true"},"#"),a(" GRPC教程 5 - GRPC语法和常见包的使用")],-1)),n[4]||(n[4]=s("h2",{id:"grpc基础语法教程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#grpc基础语法教程","aria-hidden":"true"},"#"),a(" gRPC基础语法教程")],-1)),s("p",null,[s("a",d,[n[0]||(n[0]=a("官方教程")),t(e)])]),n[5]||(n[5]=p(`<p>当然本期视频不会带着大家去仔细去过一遍官方文档，我们的主要目的是先run起来再说，先把最基础的学会了，然后基本就可以搞定60%的问题了，然后接着我们再对剩下的40%看一遍，有一个印象就可以了。</p><p>首先我们创建一个目录比如说就叫grpc-syntax-package</p><p>我们在这个目录下创建一个pb文件，用来存放我们的proto文件和生成的go文件。接着，我们再在里面创建一个person/person.proto,然后在里面写入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// person.proto</span>
syntax <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> person<span class="token punctuation">;</span> <span class="token comment">// protobuf package</span>

option go_package <span class="token operator">=</span> <span class="token string">&quot;grpc-syntax-package/pb/person&quot;</span><span class="token punctuation">;</span>

message Person <span class="token punctuation">{</span>
  <span class="token builtin">string</span> Name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">int64</span> Age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后呢？</p><p>我们就可以根据这个proto文件去生成对应的person.pb.go文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>pb <span class="token parameter variable">--go_out</span><span class="token operator">=</span>pb <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative pb/person/person.proto 

这里--proto_path<span class="token operator">=</span>pb的意思是，输入的proto文件是在当前目录下的pb目录

这里的--go_out<span class="token operator">=</span>pb 的意思是，输出的.pb.go文件是在当前目录下的proto目录，前提是你得有proto目录，不然就会报错。

这里的-go_opt<span class="token operator">=</span>paths<span class="token operator">=</span>source_relative是最常见的一种输出文件的方式

所以相应的你也可以新创建一个proto目录去试试这个命令

protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>pb <span class="token parameter variable">--go_out</span><span class="token operator">=</span>proto <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative pb/person/person.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着你可以点进对应的person.pb.go文件去对照proto文件看一下，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> student<span class="token punctuation">;</span> 其实是protobuf的包，当别的proto文件去使用这个文件时，使用的就是这个包名
option go_package <span class="token operator">=</span> <span class="token string">&quot;grpc-syntax-package/pb/person&quot;</span><span class="token punctuation">;</span> 这个的意思是 当在别的proto生成对应的文件时，输出引入的person的包就叫这个包。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建一个student/student.proto去引入person.proto演示一下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>syntax <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> student<span class="token punctuation">;</span>

option go_package <span class="token operator">=</span> <span class="token string">&quot;grpc-syntax-package/pb/student&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;pb/person/person.proto&quot;</span><span class="token punctuation">;</span>

message Student <span class="token punctuation">{</span>
  person<span class="token punctuation">.</span>Person person <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用刚才的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>pb <span class="token parameter variable">--go_out</span><span class="token operator">=</span>proto <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative pb/person/person.proto pb/student/student.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现是生成失败的，因为我们定义的--proto_path=pb是pb,而在student包里却是import &quot;pb/person/person.proto&quot;;，所以找不到pb目录，我们需要修改一下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--proto_path</span><span class="token operator">=</span>. <span class="token parameter variable">--go_out</span><span class="token operator">=</span>. <span class="token parameter variable">--go_opt</span><span class="token operator">=</span>paths<span class="token operator">=</span>source_relative pb/person/person.proto pb/student/student.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就可以了，让--proto_path=. --go_out=.就可以了。</p><p>这也是最简单的命令包使用。</p><p>我们来回顾一下。</p><p>使用protobuf编程的方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>. 编写proto文件 
<span class="token number">2</span>. 输出go文件
<span class="token number">3</span>. 编写代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们详细看一看message里的字段类型有哪些，这里不是要大家记住所有的字段，而是让大家有个印象，这样以后我们自己编写proto文件的时候，哪怕忘记了某个字段，但是有印象就可以去文档里找。</p>`,21)),s("p",null,[s("a",k,[n[1]||(n[1]=a("https://protobuf.dev/programming-guides/proto3/#scalar")),t(e)])]),n[6]||(n[6]=p(`<p>以及看看下面的默认类型。</p><p>Enumerations 枚举类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>enum Gender <span class="token punctuation">{</span>
    Man <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Woman <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Gender gender <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Optional 可选类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  optional <span class="token builtin">uint32</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Repeated 数组类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  repeated <span class="token builtin">string</span> books <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Reserved 保留类型， 当我们更新proto文件，比如需要删除某个字段时，但是可能有别的微服务在使用我们之前的proto版本，那我们可以直接删除某个字段吗？答案是不可以。这是因为在protobuf的二进制编码中，每个字段都有一个唯一的编号，用于标识该字段的类型和位置。如果您定义了一个新的字段并使用了已经保留的字段号，那么在序列化和反序列化时就会出现冲突，导致数据解析失败。</p><p>因此，当您使用 reserved 关键字时，编译器会检查您定义的每个字段的编号是否与已保留的字段号冲突。如果您尝试使用保留的字段号定义新的字段，编译器会报错，以防止在序列化和反序列化时出现数据损坏或解析失败的情况。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  reserved <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Map 映射类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>  <span class="token keyword">map</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>oneof 字段</p><p>oneof content {<br> int32 number = 7;<br> string text = 8;<br> bool flag = 9;<br> }</p><p>于是我们的代码后可以这样</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> pb<span class="token punctuation">.</span>Person<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span>   <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>    proto<span class="token punctuation">.</span><span class="token function">Uint32</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Gender<span class="token punctuation">:</span> pb<span class="token punctuation">.</span>Person_Woman<span class="token punctuation">,</span>
		Books<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;book1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;book2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		M<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
			<span class="token string">&quot;key1&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;key2&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		Content<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Person_Text<span class="token punctuation">{</span>Text<span class="token punctuation">:</span> <span class="token string">&quot;221dd&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="grpc导入别的包去使用" tabindex="-1"><a class="header-anchor" href="#grpc导入别的包去使用" aria-hidden="true">#</a> gRPC导入别的包去使用</h2><h3 id="any包" tabindex="-1"><a class="header-anchor" href="#any包" aria-hidden="true">#</a> any包</h3><p>导入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Import <span class="token string">&quot;google.golang.org/protobuf/types/known/anypb&quot;</span>


google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>Any details <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成代码</p><p>然后代码中我们怎么使用呢?</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Details<span class="token punctuation">:</span> <span class="token operator">&amp;</span>anypb<span class="token punctuation">.</span>Any<span class="token punctuation">{</span>
			TypeUrl<span class="token punctuation">:</span> <span class="token string">&quot;example.com/MyMessageDetails&quot;</span><span class="token punctuation">,</span>
			Value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;your details&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timestamp包" tabindex="-1"><a class="header-anchor" href="#timestamp包" aria-hidden="true">#</a> timestamp包</h3><p>在 Protobuf 中，google.protobuf.Timestamp 类型表示一个时间戳，它包含了秒数和纳秒数两个字段。在 Go 中，google.protobuf.Timestamp 被映射为 *timestamp.Timestamp 类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span>	<span class="token string">&quot;google.golang.org/protobuf/types/known/timestamppb&quot;</span>

now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
timestampProto <span class="token operator">:=</span> timestamppb<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>
CreatedAt<span class="token punctuation">:</span> timestampProto<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="field-mask-包" tabindex="-1"><a class="header-anchor" href="#field-mask-包" aria-hidden="true">#</a> field_mask 包</h3><p>在 Protobuf 中，google.protobuf.FieldMask 类型用于指定在更新一个资源时需要更新哪些字段。它包含一个字段列表，列表中的每个字段表示需要更新的一个字段的路径。</p><p>我们新加入一个message，来请求更新我们的Person</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>message UpdatePersonReq <span class="token punctuation">{</span>
  <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>FieldMask update_mask <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  Person update_data <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;google/protobuf/field_mask.proto&quot;</span><span class="token punctuation">;</span>


	mask <span class="token operator">:=</span> <span class="token operator">&amp;</span>fieldmaskpb<span class="token punctuation">.</span>FieldMask<span class="token punctuation">{</span>
		Paths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gender&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	req <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>UpdatePersonReq<span class="token punctuation">{</span>
		Name<span class="token punctuation">:</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span>
		UpdateMask<span class="token punctuation">:</span> mask<span class="token punctuation">,</span>
		UpdateData<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Person<span class="token punctuation">{</span>
			Name<span class="token punctuation">:</span> <span class="token string">&quot;Lixin&quot;</span><span class="token punctuation">,</span>
			Gender<span class="token punctuation">:</span> pb<span class="token punctuation">.</span>Person_Woman<span class="token punctuation">,</span>
			Content<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>Person_Flag<span class="token punctuation">{</span>Flag<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的客户端这么写，服务器端怎么根据field_mask值去更新对应的字段呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">resp</span><span class="token punctuation">(</span>req pb<span class="token punctuation">.</span>UpdatePersonReq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 首先，我们需要检查请求中是否指定了 update_mask 字段</span>
	<span class="token keyword">if</span> req<span class="token punctuation">.</span>UpdateMask <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果 update_mask 字段未指定，则更新所有字段</span>
			<span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">UpdateResource</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>UpdatedData<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果 update_mask 字段指定了，则只更新指定的字段</span>
	<span class="token comment">// 首先，我们需要将 FieldMask 转换为一个字符串数组</span>
	paths <span class="token operator">:=</span> req<span class="token punctuation">.</span>UpdateMask<span class="token punctuation">.</span>Paths

	<span class="token comment">// 然后，我们需要创建一个包含要更新的字段的 map</span>
	fields <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> paths <span class="token punctuation">{</span>
			<span class="token keyword">switch</span> path <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>
					fields<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>UpdateData<span class="token punctuation">.</span>Name
			<span class="token keyword">case</span> <span class="token string">&quot;gender&quot;</span><span class="token punctuation">:</span>
					fields<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>UpdateData<span class="token punctuation">.</span>Gender
			<span class="token comment">// 如果请求中包含了我们不支持的字段，则返回一个错误</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
					<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>InvalidArgument<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported field: %s&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 最后，我们调用数据库的 UpdateResourceWithFields 方法来更新指定的字段</span>
	<span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">UpdateResourceWithFields</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以我们的服务端可以类似这样的去写，根据field_mask字段去更新对应的字段信息，你可能会问了，为什么直接传递一个Person？因为使用 FieldMask 字段的主要目的是为了避免在更新操作中无意中修改了一些不应该被修改的字段，从而导致不可预料的后果。如果我们误传了一个错误的 Person 对象，甚至可能会更新一些我们根本不想更新的字段，从而导致数据不一致等问题。</p><p>使用 FieldMask 字段可以让客户端明确地指定要更新的字段，从而避免这些问题。通过指定 FieldMask 字段，客户端可以控制更新操作仅修改指定的字段，而不是所有字段。这样，即使客户端传递了错误的数据，服务器也可以根据 FieldMask 中指定的字段来执行正确的操作，从而避免不必要的风险。</p><p>因此，使用 FieldMask 字段是一个很好的实践，可以帮助我们编写更加健壮和可靠的代码。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们在本期教程中，第一部分，学习了gRPC的主要语法以及如何用protoc工具生成.pb.go文件以及生成对应的_grpc.pb.go文件和相关的命令行的作用。认识到了proto里面的某些字段的作用比如package、go_package的作用。以及定义message、定义service服务。</p><p>第二部分，我们主要学习了protobuf中的三个最常见的包的使用包括timestamp，any，field_mask。希望本期视频后，大家都能够自己动手试一试，自己敲一敲代码对这些熟悉起来。</p>`,39))])}const h=o(r,[["render",v],["__file","5.html.vue"]]);export{h as default};
