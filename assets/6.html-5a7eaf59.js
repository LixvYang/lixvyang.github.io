import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,b as s,f as l,d as a,a as p,e}from"./app-4e74bbc5.js";const r={},k={href:"https://pkg.go.dev/google.golang.org/grpc/metadata",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.liwenzhou.com/posts/Go/gRPC/#autoid-0-9-1",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const t=c("ExternalLinkIcon");return i(),u("div",null,[n[7]||(n[7]=s("p",null,"本篇教程我们来讲解gRPC的元数据处理和拦截的中间件",-1)),l(" more "),n[8]||(n[8]=s("h1",{id:"grpc教程-6-grpc元数据处理与加密认证和拦截中间件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#grpc教程-6-grpc元数据处理与加密认证和拦截中间件","aria-hidden":"true"},"#"),a(" GRPC教程 6 - gRPC元数据处理与加密认证和拦截中间件")],-1)),n[9]||(n[9]=s("h2",{id:"元数据处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#元数据处理","aria-hidden":"true"},"#"),a(" 元数据处理")],-1)),s("p",null,[n[1]||(n[1]=a("首先，先来讲一讲，元数据(metadata)，元数据是指在处理RPC请求中，不放在正文的数据，比如身份信息token(不属于业务信息)可以放在元数据中，通常以")),n[2]||(n[2]=s("code",null,"map[string][]string",-1)),n[3]||(n[3]=a("的形式存放，key是string，value是[]string类型。gRPC里规定可以存放二进制数据(key以-bin结尾)，key不能以grpc开头(因为有grp以grpc开头的数据)。元数据对于gRPC本身是不可见的，我们通常在上下文代码中存放元数据，在Go语言中我们通过")),s("a",k,[n[0]||(n[0]=a("https://pkg.go.dev/google.golang.org/grpc/metadata")),p(t)]),n[4]||(n[4]=a(" 仓库去访问元数据。"))]),n[10]||(n[10]=e(`<p>元数据的定义如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MD <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token comment">// 可以看到它的类型是map[string][]string。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过metadata.New()或metadata.Pairs去创建一个MD, 或者可以先创建一个MD，然后通过metadata.Join()去往这个MD里面添加元数据。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// md := metadata.New(map[string]string{&quot;key1&quot;: &quot;val1&quot;})</span>
md <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>
	<span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string value&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;key-bin&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 二进制数据在发送前会进行(base64) 编码</span>
	<span class="token comment">// 收到后会进行解码</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以发现MD有一些常见的使用方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MD <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">,</span> vals <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> metadata<span class="token punctuation">.</span>MD
<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span>MD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">,</span> vals <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过这些方法去对元数据进行一些操作。</p><h3 id="发送接收元数据" tabindex="-1"><a class="header-anchor" href="#发送接收元数据" aria-hidden="true">#</a> 发送接收元数据</h3><p>我们先说说在metadata包中发送元数据的方法,</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//此方法可以将元数据添加到已有的ctx中。好处是不会覆盖之前ctx的metadata</span>
metadata<span class="token punctuation">.</span><span class="token function">AppendToOutgoingContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lixin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AGE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span> 

<span class="token comment">// 这个方法metadata.NewOutgoingContext这个方法会覆盖之前crtx中的metadata。</span>
b <span class="token operator">:=</span> <span class="token string">&quot;This is bin message&quot;</span>
<span class="token comment">// md := metadata.New(map[string]string{&quot;key1&quot;: &quot;val1&quot;})</span>
md <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>
	<span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string value&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;key-bin&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 二进制数据在发送前会进行(base64) 编码</span>
	<span class="token comment">// 收到后会进行解码</span>
<span class="token punctuation">)</span>
ctx <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">NewOutgoingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> md<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来说一说接收metadata的方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>metadata<span class="token punctuation">.</span><span class="token function">FromIncomingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="设置header和trailer" tabindex="-1"><a class="header-anchor" href="#设置header和trailer" aria-hidden="true">#</a> 设置header和trailer</h3><p>Header和trailer可以简单的理解为头和尾。类似于我们调用HTTP方法的头和尾一样属于元数据的一部分。</p><p>在gRPC的上下文中，服务端方可以给客户端方设置header和trailer，客户端可以接受header和trailer。</p><p>首先介绍服务器端如何发送header和trailer</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>   <span class="token comment">// 创建和发送 header</span>
    header <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;header-name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;lixin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    grpc<span class="token punctuation">.</span><span class="token function">SendHeader</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> header<span class="token punctuation">)</span>
    <span class="token comment">// 创建和发送 trailer</span>
    trailer <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span><span class="token string">&quot;trailer-age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span>
    grpc<span class="token punctuation">.</span><span class="token function">SetTrailer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> trailer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是客户端接收请求的header和trailer</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> header<span class="token punctuation">,</span> trailer metadata<span class="token punctuation">.</span>MD 
r<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>
    ctx<span class="token punctuation">,</span>
   <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloReq<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Lixin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    grpc<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>header<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 将会接收header</span>
    grpc<span class="token punctuation">.</span><span class="token function">Trailer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trailer<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 将会接收trailer</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们做个示例去使用metadata。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// client.go</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:7890&quot;</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	c <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewGreeteringClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	metadata<span class="token punctuation">.</span><span class="token function">AppendToOutgoingContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lixin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AGE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span>

	ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token string">&quot;This is bin message&quot;</span>
	<span class="token comment">// md := metadata.New(map[string]string{&quot;key1&quot;: &quot;val1&quot;})</span>
	md <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>
		<span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string value&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;key-bin&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 二进制数据在发送前会进行(base64) 编码</span>
		<span class="token comment">// 收到后会进行解码</span>
	<span class="token punctuation">)</span>
	ctx <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">NewOutgoingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> md<span class="token punctuation">)</span>
	<span class="token keyword">var</span> header<span class="token punctuation">,</span>trailer metadata<span class="token punctuation">.</span>MD
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloReq<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;nn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">Trailer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trailer<span class="token punctuation">)</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>trailer<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">GetMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// server.go</span>
	md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">FromIncomingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;No metadata!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	md <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;lixin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">SendHeader</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> md<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	md <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">Pairs</span><span class="token punctuation">(</span>
		<span class="token string">&quot;AGE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	err <span class="token operator">=</span> grpc<span class="token punctuation">.</span><span class="token function">SetTrailer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> md<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloResp<span class="token punctuation">{</span>
		Msg<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s!\\n&quot;</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拦截中间件" tabindex="-1"><a class="header-anchor" href="#拦截中间件" aria-hidden="true">#</a> 拦截中间件</h2><p>GRPC可以在RPC的Client/Server的基础上提供了拦截器的中间件。拦截器可以在每次调用GRPC调用的时候记录一些信息或者验证用户token(比如响应时间数据等)。</p><h3 id="注册拦截器" tabindex="-1"><a class="header-anchor" href="#注册拦截器" aria-hidden="true">#</a> 注册拦截器</h3><p>首先我们之前的文章/视频讲过，GRPC请求分为直接请求和流式请求，当我们使用直接请求的时候对应的就是一元拦截器，流式请求就是流拦截器。我们这里的示例是一元拦截器，就是直接请求GRPC服务拦截器的使用，在客户端和服务器端都可以自定义拦截器。</p><p>怎么去使用拦截器呢？</p><p>在server端，我们只需要在注册GRPC服务的时候加入对应拦截器(Interceptor)。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>unaryInterceptor<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且我们需要实现unaryInterceptor 函数类型是</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> UnaryServerInterceptor <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> info <span class="token operator">*</span>UnaryServerInfo<span class="token punctuation">,</span> handler UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span>resp <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在client端呢？我们需要在Dial GRPC服务IP端口的时候，加入<code>grpc.WithUnaryInterceptor(unaryInterceptor)</code>, 就可以实现客户端的拦截器。</p><p>那我们就来实践一下吧, 我们想先在客户端加一个拦截器，比如我们想让每次传输的字节数不超过3，那么就有对应的方法来实现</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// unaryInterceptor 客户端一元拦截器</span>
<span class="token keyword">func</span> <span class="token function">unaryInterceptor</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cc <span class="token operator">*</span>grpc<span class="token punctuation">.</span>ClientConn<span class="token punctuation">,</span> invoker grpc<span class="token punctuation">.</span>UnaryInvoker<span class="token punctuation">,</span> opts <span class="token operator">...</span>grpc<span class="token punctuation">.</span>CallOption<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	opts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">MaxCallSendMsgSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	err <span class="token operator">:=</span> <span class="token function">invoker</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> method<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;reply: &quot;</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span>
	end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;RPC: %s, start time: %s, end time: %s, err: %v\\n&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;Basic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器端这里什么都不需要做，因为我们只在客户端加一个拦截器，如果传入的字节数超过3，那么会直接返回错误的。</p><h3 id="加密处理" tabindex="-1"><a class="header-anchor" href="#加密处理" aria-hidden="true">#</a> 加密处理</h3>`,36)),s("p",null,[n[6]||(n[6]=a("参考")),s("a",d,[n[5]||(n[5]=a("https://www.liwenzhou.com/posts/Go/gRPC/#autoid-0-9-1")),p(t)])]),n[11]||(n[11]=e(`<h3 id="grpc的加密处理中间件" tabindex="-1"><a class="header-anchor" href="#grpc的加密处理中间件" aria-hidden="true">#</a> gRPC的加密处理中间件</h3><p>那如果我们想让中间件有加密处理这一层呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// server.go</span>

creds<span class="token punctuation">,</span> err <span class="token operator">:=</span> credentials<span class="token punctuation">.</span><span class="token function">NewServerTLSFromFile</span><span class="token punctuation">(</span><span class="token string">&quot;certs/server.crt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;certs/server.key&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">Creds</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">UnaryInterceptor</span><span class="token punctuation">(</span>unaryInterceptor<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// valid 校验认证信息.</span>
<span class="token keyword">func</span> <span class="token function">valid</span><span class="token punctuation">(</span>authorization <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
	token <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>authorization<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 执行token认证的逻辑</span>
	<span class="token comment">// 这里是为了演示方便简单判断token是否与&quot;some-secret-token&quot;相等</span>
	<span class="token keyword">return</span> token <span class="token operator">==</span> <span class="token string">&quot;some-secret-token&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// unaryInterceptor 服务端一元拦截器</span>
<span class="token keyword">func</span> <span class="token function">unaryInterceptor</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> info <span class="token operator">*</span>grpc<span class="token punctuation">.</span>UnaryServerInfo<span class="token punctuation">,</span> handler grpc<span class="token punctuation">.</span>UnaryHandler<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// authentication (token verification)</span>
	md<span class="token punctuation">,</span> ok <span class="token operator">:=</span> metadata<span class="token punctuation">.</span><span class="token function">FromIncomingContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>InvalidArgument<span class="token punctuation">,</span> <span class="token string">&quot;missing metadata&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>codes<span class="token punctuation">.</span>Unauthenticated<span class="token punctuation">,</span> <span class="token string">&quot;invalid token&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	m<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;RPC failed with error %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> m<span class="token punctuation">,</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// client.go

certs, err := credentials.NewClientTLSFromFile(&quot;./certs/server.crt&quot;, &quot;&quot;)
	if err != nil {
		log.Fatal(err)
	}

	conn, err := grpc.Dial(&quot;127.0.0.1:7890&quot;, grpc.WithTransportCredentials(certs), grpc.WithUnaryInterceptor(unaryInterceptor))

// unaryInterceptor 客户端一元拦截器
func unaryInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
	var credsConfigured bool
	for _, o := range opts {
		_, ok := o.(grpc.PerRPCCredsCallOption)
		if ok {
			credsConfigured = true
			break
		}
	}
	if !credsConfigured {
		opts = append(opts, grpc.PerRPCCredentials(oauth.NewOauthAccess(&amp;oauth2.Token{
			AccessToken: &quot;some-secret-token&quot;,
		})))
	}

	opts = append(opts, grpc.MaxCallSendMsgSize(5))

	start := time.Now()
	err := invoker(ctx, method, req, reply, cc, opts...)
	fmt.Println(&quot;reply: &quot;, reply)
	end := time.Now()
	fmt.Printf(&quot;RPC: %s, start time: %s, end time: %s, err: %v\\n&quot;, method, start.Format(&quot;Basic&quot;), end.Format(time.RFC3339), err)
	return err
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以通过中间件来判断有没有加密处理了，如果没有加密处理，我们的服务端是直接拒接请求的。</p><h3 id="grpc拦截器和gin的拦截器对比" tabindex="-1"><a class="header-anchor" href="#grpc拦截器和gin的拦截器对比" aria-hidden="true">#</a> gRPC拦截器和gin的拦截器对比</h3><p>Gin框架的拦截器呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
				<span class="token string">&quot;exit&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Sorry.&quot;</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			ctx<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		count<span class="token operator">++</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a intercepter.&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Lixin&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:7899&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>元数据处理<br> 拦截器<br> GRPC的加密处理<br> GIN和GRPC 拦截器的对比</p>`,10))])}const f=o(r,[["render",v],["__file","6.html.vue"]]);export{f as default};
